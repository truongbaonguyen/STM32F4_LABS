
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000025c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018da  00000000  00000000  0002a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f582  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b086  00000000  00000000  0004c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb98e  00000000  00000000  00057258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00112be6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a14  00000000  00000000  00112c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044d0 	.word	0x080044d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044d0 	.word	0x080044d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <CRC_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CRC_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
    uint8_t _crc;
    for (int i = 0; i < 0x100; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	e022      	b.n	80005c6 <CRC_Init+0x52>
        _crc = i;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	73fb      	strb	r3, [r7, #15]

        for (uint8_t bit = 0; bit < 8; bit++) _crc = (_crc & 0x80) ? ((_crc << 1) ^ 0x1D) : (_crc << 1);
 8000584:	2300      	movs	r3, #0
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	e012      	b.n	80005b0 <CRC_Init+0x3c>
 800058a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058e:	2b00      	cmp	r3, #0
 8000590:	da07      	bge.n	80005a2 <CRC_Init+0x2e>
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	b25b      	sxtb	r3, r3
 8000598:	f083 031d 	eor.w	r3, r3, #29
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	e002      	b.n	80005a8 <CRC_Init+0x34>
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73fb      	strb	r3, [r7, #15]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3301      	adds	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d9e9      	bls.n	800058a <CRC_Init+0x16>
            crcTable[i] = _crc;
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <CRC_Init+0x68>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4413      	add	r3, r2
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 0x100; i++) {
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	ddd9      	ble.n	8000580 <CRC_Init+0xc>
    }
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200001b0 	.word	0x200001b0

080005e0 <CalcCRC>:

uint8_t CalcCRC(uint8_t * buf, uint8_t len)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
    const uint8_t * ptr = buf;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
    uint8_t _crc = 0xFF;
 80005f0:	23ff      	movs	r3, #255	; 0xff
 80005f2:	72fb      	strb	r3, [r7, #11]

    while(len--) _crc = crcTable[_crc ^ *ptr++];
 80005f4:	e00a      	b.n	800060c <CalcCRC+0x2c>
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	60fa      	str	r2, [r7, #12]
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	7afb      	ldrb	r3, [r7, #11]
 8000600:	4053      	eors	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <CalcCRC+0x48>)
 8000608:	5c9b      	ldrb	r3, [r3, r2]
 800060a:	72fb      	strb	r3, [r7, #11]
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	70fa      	strb	r2, [r7, #3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1ef      	bne.n	80005f6 <CalcCRC+0x16>
    return ~_crc;
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	43db      	mvns	r3, r3
 800061a:	b2db      	uxtb	r3, r3
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	200001b0 	.word	0x200001b0

0800062c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	4821      	ldr	r0, [pc, #132]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800063a:	f001 fe9d 	bl	8002378 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Node1_RxHeader, Node1_RxData);
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f001 f88c 	bl	8001762 <HAL_CAN_GetRxMessage>
	if (Node1_RxHeader.DLC == 8)
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	2b08      	cmp	r3, #8
 8000650:	d132      	bne.n	80006b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
	{
		printf("Node 1 get data: ");
 8000652:	481e      	ldr	r0, [pc, #120]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000654:	f002 ff50 	bl	80034f8 <iprintf>
		for (uint8_t i = 0; i < 8; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e009      	b.n	8000672 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		{
			printf("%X ", Node1_RxData[i]);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000662:	5cd3      	ldrb	r3, [r2, r3]
 8000664:	4619      	mov	r1, r3
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000668:	f002 ff46 	bl	80034f8 <iprintf>
		for (uint8_t i = 0; i < 8; i++)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3301      	adds	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d9f2      	bls.n	800065e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		}
		printf("\n");
 8000678:	200a      	movs	r0, #10
 800067a:	f002 ff55 	bl	8003528 <putchar>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000684:	f001 fe78 	bl	8002378 <HAL_GPIO_WritePin>
;
		// cap nhat gia tri dem
		Node1_TxData[6] = ++Node1_RxData[7];
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800068a:	79db      	ldrb	r3, [r3, #7]
 800068c:	3301      	adds	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000692:	71da      	strb	r2, [r3, #7]
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000696:	79da      	ldrb	r2, [r3, #7]
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800069a:	719a      	strb	r2, [r3, #6]

		// checksum
		Node1_TxData[7] = CalcCRC(Node1_TxData, sizeof(uint8_t)*7);
 800069c:	2107      	movs	r1, #7
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80006a0:	f7ff ff9e 	bl	80005e0 <CalcCRC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80006aa:	71da      	strb	r2, [r3, #7]

		// gui lai goi tin cho Node 2
		HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80006ae:	4a09      	ldr	r2, [pc, #36]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80006b0:	490a      	ldr	r1, [pc, #40]	; (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80006b4:	f000 ff7a 	bl	80015ac <HAL_CAN_AddTxMessage>

	}
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400
 80006c4:	2000015c 	.word	0x2000015c
 80006c8:	20000138 	.word	0x20000138
 80006cc:	080044e8 	.word	0x080044e8
 80006d0:	080044fc 	.word	0x080044fc
 80006d4:	20000154 	.word	0x20000154
 80006d8:	20000164 	.word	0x20000164
 80006dc:	20000120 	.word	0x20000120
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2104      	movs	r1, #4
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80006f2:	f001 fe41 	bl	8002378 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Node2_RxHeader, Node2_RxData);
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80006f8:	4a17      	ldr	r2, [pc, #92]	; (8000758 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f001 f830 	bl	8001762 <HAL_CAN_GetRxMessage>
	if (Node2_RxHeader.DLC == 8)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	2b08      	cmp	r3, #8
 8000708:	d11e      	bne.n	8000748 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
	{
		printf("Node 2 get data: ");
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 800070c:	f002 fef4 	bl	80034f8 <iprintf>
		for (uint8_t i = 0; i < 8; i++) {
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e009      	b.n	800072a <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
			printf("%X ", Node2_RxData[i]);
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	4619      	mov	r1, r3
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 8000720:	f002 feea 	bl	80034f8 <iprintf>
		for (uint8_t i = 0; i < 8; i++) {
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	3301      	adds	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d9f2      	bls.n	8000716 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
		}
		printf("\n");
 8000730:	200a      	movs	r0, #10
 8000732:	f002 fef9 	bl	8003528 <putchar>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2104      	movs	r1, #4
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 800073c:	f001 fe1c 	bl	8002378 <HAL_GPIO_WritePin>

		// cap nhat gia tri dem
		Node2_TxData[7] = Node2_RxData[6];
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8000742:	799a      	ldrb	r2, [r3, #6]
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>)
 8000746:	71da      	strb	r2, [r3, #7]
	}
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020400 	.word	0x40020400
 8000754:	200001a4 	.word	0x200001a4
 8000758:	20000180 	.word	0x20000180
 800075c:	08004500 	.word	0x08004500
 8000760:	080044fc 	.word	0x080044fc
 8000764:	2000019c 	.word	0x2000019c

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fc68 	bl	8001040 <HAL_Init>

  /* USER CODE BEGIN Init */
  CRC_Init();
 8000770:	f7ff ff00 	bl	8000574 <CRC_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f87e 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f9bc 	bl	8000af4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800077c:	f000 f8e4 	bl	8000948 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000780:	f000 f938 	bl	80009f4 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 8000784:	f000 f98c 	bl	8000aa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000788:	4832      	ldr	r0, [pc, #200]	; (8000854 <main+0xec>)
 800078a:	f000 fecb 	bl	8001524 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 800078e:	4832      	ldr	r0, [pc, #200]	; (8000858 <main+0xf0>)
 8000790:	f000 fec8 	bl	8001524 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000794:	2102      	movs	r1, #2
 8000796:	482f      	ldr	r0, [pc, #188]	; (8000854 <main+0xec>)
 8000798:	f001 f8f5 	bl	8001986 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 800079c:	2110      	movs	r1, #16
 800079e:	482e      	ldr	r0, [pc, #184]	; (8000858 <main+0xf0>)
 80007a0:	f001 f8f1 	bl	8001986 <HAL_CAN_ActivateNotification>

  Node1_TxHeader.DLC = 8;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <main+0xf4>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	611a      	str	r2, [r3, #16]
  Node1_TxHeader.IDE = CAN_ID_STD;
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <main+0xf4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  Node1_TxHeader.RTR = CAN_RTR_DATA;
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <main+0xf4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  Node1_TxHeader.StdId = 0x012;
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <main+0xf4>)
 80007b8:	2212      	movs	r2, #18
 80007ba:	601a      	str	r2, [r3, #0]

  Node1_TxData[0] = 0x55;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <main+0xf8>)
 80007be:	2255      	movs	r2, #85	; 0x55
 80007c0:	701a      	strb	r2, [r3, #0]
  Node1_TxData[1] = 0x55;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <main+0xf8>)
 80007c4:	2255      	movs	r2, #85	; 0x55
 80007c6:	705a      	strb	r2, [r3, #1]
  Node1_TxData[2] = 0x55;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <main+0xf8>)
 80007ca:	2255      	movs	r2, #85	; 0x55
 80007cc:	709a      	strb	r2, [r3, #2]
  Node1_TxData[3] = 0x55;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <main+0xf8>)
 80007d0:	2255      	movs	r2, #85	; 0x55
 80007d2:	70da      	strb	r2, [r3, #3]
  Node1_TxData[4] = 0x55;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <main+0xf8>)
 80007d6:	2255      	movs	r2, #85	; 0x55
 80007d8:	711a      	strb	r2, [r3, #4]
  Node1_TxData[5] = 0x55;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <main+0xf8>)
 80007dc:	2255      	movs	r2, #85	; 0x55
 80007de:	715a      	strb	r2, [r3, #5]
  Node1_TxData[6] = 0x00;	// gia tri dem
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <main+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	719a      	strb	r2, [r3, #6]
  Node1_TxData[7] = 0x00;	// checksum
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <main+0xf8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	71da      	strb	r2, [r3, #7]

  Node2_TxHeader.DLC = 8;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <main+0xfc>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	611a      	str	r2, [r3, #16]
  Node2_TxHeader.IDE = CAN_ID_STD;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <main+0xfc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  Node2_TxHeader.RTR = CAN_RTR_DATA;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <main+0xfc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  Node2_TxHeader.StdId = 0x0A2;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <main+0xfc>)
 8000800:	22a2      	movs	r2, #162	; 0xa2
 8000802:	601a      	str	r2, [r3, #0]

  Node2_TxData[0] = 0xAA;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <main+0x100>)
 8000806:	22aa      	movs	r2, #170	; 0xaa
 8000808:	701a      	strb	r2, [r3, #0]
  Node2_TxData[1] = 0xAA;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <main+0x100>)
 800080c:	22aa      	movs	r2, #170	; 0xaa
 800080e:	705a      	strb	r2, [r3, #1]
  Node2_TxData[2] = 0xAA;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <main+0x100>)
 8000812:	22aa      	movs	r2, #170	; 0xaa
 8000814:	709a      	strb	r2, [r3, #2]
  Node2_TxData[3] = 0xAA;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0x100>)
 8000818:	22aa      	movs	r2, #170	; 0xaa
 800081a:	70da      	strb	r2, [r3, #3]
  Node2_TxData[4] = 0xAA;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <main+0x100>)
 800081e:	22aa      	movs	r2, #170	; 0xaa
 8000820:	711a      	strb	r2, [r3, #4]
  Node2_TxData[5] = 0xAA;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <main+0x100>)
 8000824:	22aa      	movs	r2, #170	; 0xaa
 8000826:	715a      	strb	r2, [r3, #5]
  Node2_TxData[6] = 0xAA;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <main+0x100>)
 800082a:	22aa      	movs	r2, #170	; 0xaa
 800082c:	719a      	strb	r2, [r3, #6]
  Node2_TxData[7] = 0x00; 	// gia tri dem
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <main+0x100>)
 8000830:	2200      	movs	r2, #0
 8000832:	71da      	strb	r2, [r3, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000834:	2101      	movs	r1, #1
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <main+0x104>)
 8000838:	f001 fdb7 	bl	80023aa <HAL_GPIO_TogglePin>
	  HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData, &Node2_TxMailbox);
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <main+0x108>)
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <main+0x100>)
 8000840:	4908      	ldr	r1, [pc, #32]	; (8000864 <main+0xfc>)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <main+0xf0>)
 8000844:	f000 feb2 	bl	80015ac <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084c:	f000 fc6a 	bl	8001124 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000850:	e7f0      	b.n	8000834 <main+0xcc>
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c
 8000858:	200000b4 	.word	0x200000b4
 800085c:	20000120 	.word	0x20000120
 8000860:	20000154 	.word	0x20000154
 8000864:	20000168 	.word	0x20000168
 8000868:	2000019c 	.word	0x2000019c
 800086c:	40020400 	.word	0x40020400
 8000870:	200001ac 	.word	0x200001ac

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fe30 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <SystemClock_Config+0xcc>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SystemClock_Config+0xd0>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2310      	movs	r3, #16
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e4:	2308      	movs	r3, #8
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008e8:	2354      	movs	r3, #84	; 0x54
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fd71 	bl	80023e0 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000904:	f000 f958 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 ffd2 	bl	80028d0 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000932:	f000 f941 	bl	8000bb8 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_CAN1_Init+0xa8>)
 8000952:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000956:	2204      	movs	r2, #4
 8000958:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_CAN1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000966:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_CAN1_Init+0xa4>)
 800096a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800096e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000972:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000976:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_CAN1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000980:	2201      	movs	r2, #1
 8000982:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000986:	2201      	movs	r2, #1
 8000988:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_CAN1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_CAN1_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_CAN1_Init+0xa4>)
 800099e:	f000 fbe5 	bl	800116c <HAL_CAN_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80009a8:	f000 f906 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80009b0:	2312      	movs	r3, #18
 80009b2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0A2<<5;
 80009b8:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80009bc:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0A2<<5;
 80009c2:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80009c6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80009d4:	2314      	movs	r3, #20
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_CAN1_Init+0xa4>)
 80009de:	f000 fcc1 	bl	8001364 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	40006400 	.word	0x40006400

080009f4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_CAN2_Init+0xa4>)
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <MX_CAN2_Init+0xa8>)
 80009fe:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a12:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000a1a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a1e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a22:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a4a:	f000 fb8f 	bl	800116c <HAL_CAN_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000a54:	f000 f8b0 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 19;//10;  // which filter bank to use from the assigned ones
 8000a5c:	2313      	movs	r3, #19
 8000a5e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x012<<5;
 8000a64:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a68:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 8000a6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a72:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_CAN2_Init+0xa4>)
 8000a8a:	f000 fc6b 	bl	8001364 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000b4 	.word	0x200000b4
 8000a9c:	40006800 	.word	0x40006800

08000aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART1_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad8:	f002 f91a 	bl	8002d10 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f869 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000dc 	.word	0x200000dc
 8000af0:	40011000 	.word	0x40011000

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x98>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_GPIO_Init+0x9c>)
 8000b64:	f001 fc08 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x9c>)
 8000b80:	f001 fa5e 	bl	8002040 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <__io_putchar+0x20>)
 8000ba4:	f002 f901 	bl	8002daa <HAL_UART_Transmit>


 return ch;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000dc 	.word	0x200000dc

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a4a      	ldr	r2, [pc, #296]	; (8000d5c <HAL_CAN_MspInit+0x148>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13e      	bne.n	8000cb4 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000c3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10d      	bne.n	8000c64 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c92:	2309      	movs	r3, #9
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4832      	ldr	r0, [pc, #200]	; (8000d68 <HAL_CAN_MspInit+0x154>)
 8000c9e:	f001 f9cf 	bl	8002040 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2014      	movs	r0, #20
 8000ca8:	f001 f993 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cac:	2014      	movs	r0, #20
 8000cae:	f001 f9ac 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000cb2:	e04f      	b.n	8000d54 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <HAL_CAN_MspInit+0x158>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d14a      	bne.n	8000d54 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000ce2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_CAN_MspInit+0x14c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10d      	bne.n	8000d08 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_CAN_MspInit+0x150>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d24:	2360      	movs	r3, #96	; 0x60
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d34:	2309      	movs	r3, #9
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_CAN_MspInit+0x15c>)
 8000d40:	f001 f97e 	bl	8002040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2041      	movs	r0, #65	; 0x41
 8000d4a:	f001 f942 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d4e:	2041      	movs	r0, #65	; 0x41
 8000d50:	f001 f95b 	bl	800200a <HAL_NVIC_EnableIRQ>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40006400 	.word	0x40006400
 8000d60:	200002b0 	.word	0x200002b0
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40006800 	.word	0x40006800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dec:	f001 f928 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f948 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <CAN1_RX0_IRQHandler+0x10>)
 8000e5e:	f000 fdb8 	bl	80019d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000008c 	.word	0x2000008c

08000e6c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <CAN2_RX1_IRQHandler+0x10>)
 8000e72:	f000 fdae 	bl	80019d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000b4 	.word	0x200000b4

08000e80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
	}

return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e009      	b.n	8000ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe5d 	bl	8000b94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf1      	blt.n	8000ecc <_write+0x12>
	}
	return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:

int _close(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_isatty>:

int _isatty(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f002 fa82 	bl	8003494 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20020000 	.word	0x20020000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200002b4 	.word	0x200002b4
 8000fc4:	200002d0 	.word	0x200002d0

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001016:	f7ff ffd7 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 fa41 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fba3 	bl	8000768 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001030:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8001034:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001038:	200002cc 	.word	0x200002cc

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 ffa7 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fda6 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 ffbf 	bl	8002026 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 ff87 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200002b8 	.word	0x200002b8

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200002b8 	.word	0x200002b8

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0ed      	b.n	800135a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fd42 	bl	8000c14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff ffb4 	bl	800110c <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a6:	e012      	b.n	80011ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a8:	f7ff ffb0 	bl	800110c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d90b      	bls.n	80011ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2205      	movs	r2, #5
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0c5      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0e5      	beq.n	80011a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0202 	bic.w	r2, r2, #2
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff ff8e 	bl	800110c <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011f2:	e012      	b.n	800121a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f4:	f7ff ff8a 	bl	800110c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d90b      	bls.n	800121a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e09f      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e5      	bne.n	80011f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7e1b      	ldrb	r3, [r3, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e007      	b.n	8001252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e5b      	ldrb	r3, [r3, #25]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e007      	b.n	800127c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800127a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e9b      	ldrb	r3, [r3, #26]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0220 	bic.w	r2, r2, #32
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7edb      	ldrb	r3, [r3, #27]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0208 	bic.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7f5b      	ldrb	r3, [r3, #29]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	ea42 0103 	orr.w	r1, r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <HAL_CAN_ConfigFilter+0x26>
 8001382:	7cfb      	ldrb	r3, [r7, #19]
 8001384:	2b02      	cmp	r3, #2
 8001386:	f040 80be 	bne.w	8001506 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <HAL_CAN_ConfigFilter+0x1bc>)
 800138c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2201      	movs	r2, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	401a      	ands	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d123      	bne.n	8001434 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3248      	adds	r2, #72	; 0x48
 8001414:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001428:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	3348      	adds	r3, #72	; 0x48
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d122      	bne.n	8001482 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800145c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3248      	adds	r2, #72	; 0x48
 8001462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001476:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001478:	6979      	ldr	r1, [r7, #20]
 800147a:	3348      	adds	r3, #72	; 0x48
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	401a      	ands	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800149c:	e007      	b.n	80014ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014c8:	e007      	b.n	80014da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d107      	bne.n	80014f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f8:	f023 0201 	bic.w	r2, r3, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e006      	b.n	8001514 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40006400 	.word	0x40006400

08001524 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d12e      	bne.n	8001596 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff fddc 	bl	800110c <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001556:	e012      	b.n	800157e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001558:	f7ff fdd8 	bl	800110c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b0a      	cmp	r3, #10
 8001564:	d90b      	bls.n	800157e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2205      	movs	r2, #5
 8001576:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e012      	b.n	80015a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e5      	bne.n	8001558 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e006      	b.n	80015a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d003      	beq.n	80015d8 <HAL_CAN_AddTxMessage+0x2c>
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	f040 80b8 	bne.w	8001748 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80a0 	beq.w	8001738 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	0e1b      	lsrs	r3, r3, #24
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d907      	bls.n	8001618 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e09e      	b.n	8001756 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001618:	2201      	movs	r2, #1
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	409a      	lsls	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	6809      	ldr	r1, [r1, #0]
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3318      	adds	r3, #24
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	440b      	add	r3, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e00f      	b.n	8001666 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001650:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001656:	68f9      	ldr	r1, [r7, #12]
 8001658:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800165a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3318      	adds	r3, #24
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	440b      	add	r3, r1
 8001676:	3304      	adds	r3, #4
 8001678:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	7d1b      	ldrb	r3, [r3, #20]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d111      	bne.n	80016a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3318      	adds	r3, #24
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	3304      	adds	r3, #4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	6811      	ldr	r1, [r2, #0]
 8001696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3318      	adds	r3, #24
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	440b      	add	r3, r1
 80016a2:	3304      	adds	r3, #4
 80016a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3307      	adds	r3, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	061a      	lsls	r2, r3, #24
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3306      	adds	r3, #6
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3305      	adds	r3, #5
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4313      	orrs	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	3204      	adds	r2, #4
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	4610      	mov	r0, r2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	6811      	ldr	r1, [r2, #0]
 80016ce:	ea43 0200 	orr.w	r2, r3, r0
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	440b      	add	r3, r1
 80016d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3303      	adds	r3, #3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	061a      	lsls	r2, r3, #24
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3302      	adds	r3, #2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	4610      	mov	r0, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	6811      	ldr	r1, [r2, #0]
 8001704:	ea43 0200 	orr.w	r2, r3, r0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001712:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3318      	adds	r3, #24
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	6811      	ldr	r1, [r2, #0]
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3318      	adds	r3, #24
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	440b      	add	r3, r1
 8001732:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e00e      	b.n	8001756 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e006      	b.n	8001756 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <HAL_CAN_GetRxMessage+0x24>
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b02      	cmp	r3, #2
 8001782:	f040 80f3 	bne.w	800196c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10e      	bne.n	80017aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0e7      	b.n	800197a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0d8      	b.n	800197a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	331b      	adds	r3, #27
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0204 	and.w	r2, r3, #4
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	331b      	adds	r3, #27
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0d5b      	lsrs	r3, r3, #21
 80017f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	331b      	adds	r3, #27
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	331b      	adds	r3, #27
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0202 	and.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	331b      	adds	r3, #27
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 020f 	and.w	r2, r3, #15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	331b      	adds	r3, #27
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	3304      	adds	r3, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b2da      	uxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	331b      	adds	r3, #27
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	3304      	adds	r3, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0a1a      	lsrs	r2, r3, #8
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0c1a      	lsrs	r2, r3, #16
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	3302      	adds	r3, #2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0e1a      	lsrs	r2, r3, #24
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3303      	adds	r3, #3
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0a1a      	lsrs	r2, r3, #8
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3305      	adds	r3, #5
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1a      	lsrs	r2, r3, #16
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3306      	adds	r3, #6
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0e1a      	lsrs	r2, r3, #24
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3307      	adds	r3, #7
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0220 	orr.w	r2, r2, #32
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	e007      	b.n	8001968 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e006      	b.n	800197a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d002      	beq.n	80019a4 <HAL_CAN_ActivateNotification+0x1e>
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d109      	bne.n	80019b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6959      	ldr	r1, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e006      	b.n	80019c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b08a      	sub	sp, #40	; 0x28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d07c      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d023      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f983 	bl	8001d40 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a3a:	e016      	b.n	8001a6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	e00c      	b.n	8001a6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e002      	b.n	8001a6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f989 	bl	8001d7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d024      	beq.n	8001abe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f963 	bl	8001d54 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a8e:	e016      	b.n	8001abe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e00c      	b.n	8001abe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	e002      	b.n	8001abe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f969 	bl	8001d90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d024      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f943 	bl	8001d68 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ae2:	e016      	b.n	8001b12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e00c      	b.n	8001b12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	e002      	b.n	8001b12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f949 	bl	8001da4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f930 	bl	8001db8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7fe fd5b 	bl	800062c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2210      	movs	r2, #16
 8001b98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f908 	bl	8001dcc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7fe fd85 	bl	80006e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8f2 	bl	8001de0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2208      	movs	r2, #8
 8001c16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8eb 	bl	8001df4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d07b      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d072      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d043      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03e      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca0:	2b60      	cmp	r3, #96	; 0x60
 8001ca2:	d02b      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x32a>
 8001ca4:	2b60      	cmp	r3, #96	; 0x60
 8001ca6:	d82e      	bhi.n	8001d06 <HAL_CAN_IRQHandler+0x334>
 8001ca8:	2b50      	cmp	r3, #80	; 0x50
 8001caa:	d022      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x320>
 8001cac:	2b50      	cmp	r3, #80	; 0x50
 8001cae:	d82a      	bhi.n	8001d06 <HAL_CAN_IRQHandler+0x334>
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d019      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x316>
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d826      	bhi.n	8001d06 <HAL_CAN_IRQHandler+0x334>
 8001cb8:	2b30      	cmp	r3, #48	; 0x30
 8001cba:	d010      	beq.n	8001cde <HAL_CAN_IRQHandler+0x30c>
 8001cbc:	2b30      	cmp	r3, #48	; 0x30
 8001cbe:	d822      	bhi.n	8001d06 <HAL_CAN_IRQHandler+0x334>
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d002      	beq.n	8001cca <HAL_CAN_IRQHandler+0x2f8>
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d005      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cc8:	e01d      	b.n	8001d06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd2:	e019      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cdc:	e014      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce6:	e00f      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf0:	e00a      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfa:	e005      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d04:	e000      	b.n	8001d08 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f868 	bl	8001e08 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e16b      	b.n	8002334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 815a 	bne.w	800232e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b4 	beq.w	800232e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b60      	ldr	r3, [pc, #384]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_GPIO_Init+0x310>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_GPIO_Init+0x314>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_GPIO_Init+0x318>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_GPIO_Init+0x31c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x324>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x328>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20a>
 8002246:	2307      	movs	r3, #7
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224a:	2308      	movs	r3, #8
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x310>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_GPIO_Init+0x334>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae90 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40021400 	.word	0x40021400
 800236c:	40021800 	.word	0x40021800
 8002370:	40021c00 	.word	0x40021c00
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e267      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d00c      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d157      	bne.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e242      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x74>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002478:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a68      	ldr	r2, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fe38 	bl	800110c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fe34 	bl	800110c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e207      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fe24 	bl	800110c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fe20 	bl	800110c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1f3      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c7      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4937      	ldr	r1, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fdd9 	bl	800110c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fdd5 	bl	800110c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a8      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4925      	ldr	r1, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fdb8 	bl	800110c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fdb4 	bl	800110c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e187      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d036      	beq.n	8002638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fd98 	bl	800110c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd94 	bl	800110c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e167      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x200>
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe fd81 	bl	800110c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00e      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260e:	f7fe fd7d 	bl	800110c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d907      	bls.n	800262c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e150      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000
 8002628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ea      	bne.n	800260e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b7d      	ldr	r3, [pc, #500]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a7c      	ldr	r2, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b7a      	ldr	r3, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b74      	ldr	r3, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a73      	ldr	r2, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7fe fd3d 	bl	800110c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe fd39 	bl	800110c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e10c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ea>
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x30c>
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a5b      	ldr	r2, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7fe fcfe 	bl	800110c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fcfa 	bl	800110c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0cb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RCC_OscConfig+0x334>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fce8 	bl	800110c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fce4 	bl	800110c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0b5      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a1 	beq.w	80028c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05c      	beq.n	8002844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fcb8 	bl	800110c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fcb4 	bl	800110c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e087      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fc8d 	bl	800110c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fc89 	bl	800110c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e05c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002814:	e054      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fc76 	bl	800110c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fc72 	bl	800110c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e045      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e038      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d028      	beq.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fba4 	bl	800110c <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fba0 	bl	800110c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fb04 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08004514 	.word	0x08004514
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b094      	sub	sp, #80	; 0x50
 8002aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab4:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d00d      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80e1 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ace:	e0db      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ad4:	e0db      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ada:	e0d8      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6139      	str	r1, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	ebb2 0801 	subs.w	r8, r2, r1
 8002b54:	4659      	mov	r1, fp
 8002b56:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	eb49 0303 	adc.w	r3, r9, r3
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b98:	4621      	mov	r1, r4
 8002b9a:	024a      	lsls	r2, r1, #9
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bac:	f7fd fb60 	bl	8000270 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	e058      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	0159      	lsls	r1, r3, #5
 8002be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be6:	0150      	lsls	r0, r2, #5
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4641      	mov	r1, r8
 8002bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c10:	eb63 050b 	sbc.w	r5, r3, fp
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	464b      	mov	r3, r9
 8002c30:	eb45 0303 	adc.w	r3, r5, r3
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	61fa      	str	r2, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	f7fd fb06 	bl	8000270 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3750      	adds	r7, #80	; 0x50
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08004524 	.word	0x08004524

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08004524 	.word	0x08004524

08002d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e03f      	b.n	8002da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f81c 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f929 	bl	8002fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b08a      	sub	sp, #40	; 0x28
 8002dae:	af02      	add	r7, sp, #8
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d17c      	bne.n	8002ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_UART_Transmit+0x2c>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e075      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x3e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e06e      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f985 	bl	800110c <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d108      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d104      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e003      	b.n	8002e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e3c:	e02a      	b.n	8002e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f840 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e036      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3302      	adds	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e007      	b.n	8002e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1cf      	bne.n	8002e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f810 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b090      	sub	sp, #64	; 0x40
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ede:	e050      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d04c      	beq.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eee:	f7fe f90d 	bl	800110c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d241      	bcs.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f1e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f52:	623a      	str	r2, [r7, #32]
 8002f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	69f9      	ldr	r1, [r7, #28]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d09f      	beq.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3740      	adds	r7, #64	; 0x40
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b0c0      	sub	sp, #256	; 0x100
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	ea40 0301 	orr.w	r3, r0, r1
 8002fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003004:	f021 010c 	bic.w	r1, r1, #12
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	ea40 0301 	orr.w	r3, r0, r1
 8003032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <UART_SetConfig+0x2cc>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <UART_SetConfig+0xa0>
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <UART_SetConfig+0x2d0>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d104      	bne.n	8003056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7ff fe4c 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8003050:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003054:	e003      	b.n	800305e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7ff fe33 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800305a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	f040 810c 	bne.w	8003284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800306c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003076:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800307a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	1891      	adds	r1, r2, r2
 8003084:	65b9      	str	r1, [r7, #88]	; 0x58
 8003086:	415b      	adcs	r3, r3
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800308e:	4621      	mov	r1, r4
 8003090:	eb12 0801 	adds.w	r8, r2, r1
 8003094:	4629      	mov	r1, r5
 8003096:	eb43 0901 	adc.w	r9, r3, r1
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ae:	4690      	mov	r8, r2
 80030b0:	4699      	mov	r9, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	eb18 0303 	adds.w	r3, r8, r3
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030bc:	462b      	mov	r3, r5
 80030be:	eb49 0303 	adc.w	r3, r9, r3
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030da:	460b      	mov	r3, r1
 80030dc:	18db      	adds	r3, r3, r3
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
 80030e0:	4613      	mov	r3, r2
 80030e2:	eb42 0303 	adc.w	r3, r2, r3
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
 80030e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030f0:	f7fd f8be 	bl	8000270 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <UART_SetConfig+0x2d4>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011c      	lsls	r4, r3, #4
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800310c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003114:	4642      	mov	r2, r8
 8003116:	464b      	mov	r3, r9
 8003118:	1891      	adds	r1, r2, r2
 800311a:	64b9      	str	r1, [r7, #72]	; 0x48
 800311c:	415b      	adcs	r3, r3
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003124:	4641      	mov	r1, r8
 8003126:	eb12 0a01 	adds.w	sl, r2, r1
 800312a:	4649      	mov	r1, r9
 800312c:	eb43 0b01 	adc.w	fp, r3, r1
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800313c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003144:	4692      	mov	sl, r2
 8003146:	469b      	mov	fp, r3
 8003148:	4643      	mov	r3, r8
 800314a:	eb1a 0303 	adds.w	r3, sl, r3
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003152:	464b      	mov	r3, r9
 8003154:	eb4b 0303 	adc.w	r3, fp, r3
 8003158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003168:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800316c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003170:	460b      	mov	r3, r1
 8003172:	18db      	adds	r3, r3, r3
 8003174:	643b      	str	r3, [r7, #64]	; 0x40
 8003176:	4613      	mov	r3, r2
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
 800317e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003186:	f7fd f873 	bl	8000270 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4611      	mov	r1, r2
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <UART_SetConfig+0x2d4>)
 8003192:	fba3 2301 	umull	r2, r3, r3, r1
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2264      	movs	r2, #100	; 0x64
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <UART_SetConfig+0x2d4>)
 80031a8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b4:	441c      	add	r4, r3
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80031d0:	415b      	adcs	r3, r3
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6339      	str	r1, [r7, #48]	; 0x30
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800322c:	460b      	mov	r3, r1
 800322e:	18db      	adds	r3, r3, r3
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	4613      	mov	r3, r2
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800323e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003242:	f7fd f815 	bl	8000270 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UART_SetConfig+0x2d4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <UART_SetConfig+0x2d4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4422      	add	r2, r4
 8003272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003274:	e105      	b.n	8003482 <UART_SetConfig+0x4d6>
 8003276:	bf00      	nop
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800328e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003296:	4642      	mov	r2, r8
 8003298:	464b      	mov	r3, r9
 800329a:	1891      	adds	r1, r2, r2
 800329c:	6239      	str	r1, [r7, #32]
 800329e:	415b      	adcs	r3, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a6:	4641      	mov	r1, r8
 80032a8:	1854      	adds	r4, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb43 0501 	adc.w	r5, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032cc:	464b      	mov	r3, r9
 80032ce:	eb45 0303 	adc.w	r3, r5, r3
 80032d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032f2:	4629      	mov	r1, r5
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fc:	4621      	mov	r1, r4
 80032fe:	008a      	lsls	r2, r1, #2
 8003300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003304:	f7fc ffb4 	bl	8000270 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b60      	ldr	r3, [pc, #384]	; (8003490 <UART_SetConfig+0x4e4>)
 800330e:	fba3 2302 	umull	r2, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	011c      	lsls	r4, r3, #4
 8003316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003320:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	1891      	adds	r1, r2, r2
 800332e:	61b9      	str	r1, [r7, #24]
 8003330:	415b      	adcs	r3, r3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003338:	4641      	mov	r1, r8
 800333a:	1851      	adds	r1, r2, r1
 800333c:	6139      	str	r1, [r7, #16]
 800333e:	4649      	mov	r1, r9
 8003340:	414b      	adcs	r3, r1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003350:	4659      	mov	r1, fp
 8003352:	00cb      	lsls	r3, r1, #3
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335a:	4651      	mov	r1, sl
 800335c:	00ca      	lsls	r2, r1, #3
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	4603      	mov	r3, r0
 8003364:	4642      	mov	r2, r8
 8003366:	189b      	adds	r3, r3, r2
 8003368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800336c:	464b      	mov	r3, r9
 800336e:	460a      	mov	r2, r1
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67bb      	str	r3, [r7, #120]	; 0x78
 8003382:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003390:	4649      	mov	r1, r9
 8003392:	008b      	lsls	r3, r1, #2
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339a:	4641      	mov	r1, r8
 800339c:	008a      	lsls	r2, r1, #2
 800339e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033a2:	f7fc ff65 	bl	8000270 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <UART_SetConfig+0x4e4>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	3332      	adds	r3, #50	; 0x32
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <UART_SetConfig+0x4e4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	441c      	add	r4, r3
 80033cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d0:	2200      	movs	r2, #0
 80033d2:	673b      	str	r3, [r7, #112]	; 0x70
 80033d4:	677a      	str	r2, [r7, #116]	; 0x74
 80033d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	1891      	adds	r1, r2, r2
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	415b      	adcs	r3, r3
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ea:	4641      	mov	r1, r8
 80033ec:	1851      	adds	r1, r2, r1
 80033ee:	6039      	str	r1, [r7, #0]
 80033f0:	4649      	mov	r1, r9
 80033f2:	414b      	adcs	r3, r1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003402:	4659      	mov	r1, fp
 8003404:	00cb      	lsls	r3, r1, #3
 8003406:	4651      	mov	r1, sl
 8003408:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340c:	4651      	mov	r1, sl
 800340e:	00ca      	lsls	r2, r1, #3
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	4603      	mov	r3, r0
 8003416:	4642      	mov	r2, r8
 8003418:	189b      	adds	r3, r3, r2
 800341a:	66bb      	str	r3, [r7, #104]	; 0x68
 800341c:	464b      	mov	r3, r9
 800341e:	460a      	mov	r2, r1
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	663b      	str	r3, [r7, #96]	; 0x60
 8003430:	667a      	str	r2, [r7, #100]	; 0x64
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800343e:	4649      	mov	r1, r9
 8003440:	008b      	lsls	r3, r1, #2
 8003442:	4641      	mov	r1, r8
 8003444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003448:	4641      	mov	r1, r8
 800344a:	008a      	lsls	r2, r1, #2
 800344c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003450:	f7fc ff0e 	bl	8000270 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <UART_SetConfig+0x4e4>)
 800345a:	fba3 1302 	umull	r1, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2164      	movs	r1, #100	; 0x64
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	; 0x32
 800346c:	4a08      	ldr	r2, [pc, #32]	; (8003490 <UART_SetConfig+0x4e4>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4422      	add	r2, r4
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	51eb851f 	.word	0x51eb851f

08003494 <__errno>:
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <__errno+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f001 f80c 	bl	80044d0 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	080045cc 	.word	0x080045cc
 80034dc:	080045cc 	.word	0x080045cc
 80034e0:	080045cc 	.word	0x080045cc
 80034e4:	080045d0 	.word	0x080045d0

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <iprintf>:
 80034f8:	b40f      	push	{r0, r1, r2, r3}
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <iprintf+0x2c>)
 80034fc:	b513      	push	{r0, r1, r4, lr}
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	b124      	cbz	r4, 800350c <iprintf+0x14>
 8003502:	69a3      	ldr	r3, [r4, #24]
 8003504:	b913      	cbnz	r3, 800350c <iprintf+0x14>
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f87c 	bl	8003604 <__sinit>
 800350c:	ab05      	add	r3, sp, #20
 800350e:	9a04      	ldr	r2, [sp, #16]
 8003510:	68a1      	ldr	r1, [r4, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4620      	mov	r0, r4
 8003516:	f000 f9d3 	bl	80038c0 <_vfiprintf_r>
 800351a:	b002      	add	sp, #8
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003520:	b004      	add	sp, #16
 8003522:	4770      	bx	lr
 8003524:	2000000c 	.word	0x2000000c

08003528 <putchar>:
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <putchar+0x28>)
 800352a:	b513      	push	{r0, r1, r4, lr}
 800352c:	681c      	ldr	r4, [r3, #0]
 800352e:	4601      	mov	r1, r0
 8003530:	b134      	cbz	r4, 8003540 <putchar+0x18>
 8003532:	69a3      	ldr	r3, [r4, #24]
 8003534:	b923      	cbnz	r3, 8003540 <putchar+0x18>
 8003536:	9001      	str	r0, [sp, #4]
 8003538:	4620      	mov	r0, r4
 800353a:	f000 f863 	bl	8003604 <__sinit>
 800353e:	9901      	ldr	r1, [sp, #4]
 8003540:	68a2      	ldr	r2, [r4, #8]
 8003542:	4620      	mov	r0, r4
 8003544:	b002      	add	sp, #8
 8003546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354a:	f000 bc7d 	b.w	8003e48 <_putc_r>
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c

08003554 <std>:
 8003554:	2300      	movs	r3, #0
 8003556:	b510      	push	{r4, lr}
 8003558:	4604      	mov	r4, r0
 800355a:	e9c0 3300 	strd	r3, r3, [r0]
 800355e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003562:	6083      	str	r3, [r0, #8]
 8003564:	8181      	strh	r1, [r0, #12]
 8003566:	6643      	str	r3, [r0, #100]	; 0x64
 8003568:	81c2      	strh	r2, [r0, #14]
 800356a:	6183      	str	r3, [r0, #24]
 800356c:	4619      	mov	r1, r3
 800356e:	2208      	movs	r2, #8
 8003570:	305c      	adds	r0, #92	; 0x5c
 8003572:	f7ff ffb9 	bl	80034e8 <memset>
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <std+0x38>)
 8003578:	6263      	str	r3, [r4, #36]	; 0x24
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <std+0x3c>)
 800357c:	62a3      	str	r3, [r4, #40]	; 0x28
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <std+0x40>)
 8003580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <std+0x44>)
 8003584:	6224      	str	r4, [r4, #32]
 8003586:	6323      	str	r3, [r4, #48]	; 0x30
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	08003ef9 	.word	0x08003ef9
 8003590:	08003f1b 	.word	0x08003f1b
 8003594:	08003f53 	.word	0x08003f53
 8003598:	08003f77 	.word	0x08003f77

0800359c <_cleanup_r>:
 800359c:	4901      	ldr	r1, [pc, #4]	; (80035a4 <_cleanup_r+0x8>)
 800359e:	f000 b8af 	b.w	8003700 <_fwalk_reent>
 80035a2:	bf00      	nop
 80035a4:	08004251 	.word	0x08004251

080035a8 <__sfmoreglue>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	2268      	movs	r2, #104	; 0x68
 80035ac:	1e4d      	subs	r5, r1, #1
 80035ae:	4355      	muls	r5, r2
 80035b0:	460e      	mov	r6, r1
 80035b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035b6:	f000 f8e5 	bl	8003784 <_malloc_r>
 80035ba:	4604      	mov	r4, r0
 80035bc:	b140      	cbz	r0, 80035d0 <__sfmoreglue+0x28>
 80035be:	2100      	movs	r1, #0
 80035c0:	e9c0 1600 	strd	r1, r6, [r0]
 80035c4:	300c      	adds	r0, #12
 80035c6:	60a0      	str	r0, [r4, #8]
 80035c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035cc:	f7ff ff8c 	bl	80034e8 <memset>
 80035d0:	4620      	mov	r0, r4
 80035d2:	bd70      	pop	{r4, r5, r6, pc}

080035d4 <__sfp_lock_acquire>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__sfp_lock_acquire+0x8>)
 80035d6:	f000 b8b3 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	200002bd 	.word	0x200002bd

080035e0 <__sfp_lock_release>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__sfp_lock_release+0x8>)
 80035e2:	f000 b8ae 	b.w	8003742 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	200002bd 	.word	0x200002bd

080035ec <__sinit_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__sinit_lock_acquire+0x8>)
 80035ee:	f000 b8a7 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	200002be 	.word	0x200002be

080035f8 <__sinit_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__sinit_lock_release+0x8>)
 80035fa:	f000 b8a2 	b.w	8003742 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	200002be 	.word	0x200002be

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sinit_lock_acquire>
 800360c:	69a3      	ldr	r3, [r4, #24]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sinit_lock_release>
 8003618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800361c:	6523      	str	r3, [r4, #80]	; 0x50
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <__sinit+0x68>)
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <__sinit+0x6c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	62a2      	str	r2, [r4, #40]	; 0x28
 8003626:	42a3      	cmp	r3, r4
 8003628:	bf04      	itt	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	61a3      	streq	r3, [r4, #24]
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f820 	bl	8003674 <__sfp>
 8003634:	6060      	str	r0, [r4, #4]
 8003636:	4620      	mov	r0, r4
 8003638:	f000 f81c 	bl	8003674 <__sfp>
 800363c:	60a0      	str	r0, [r4, #8]
 800363e:	4620      	mov	r0, r4
 8003640:	f000 f818 	bl	8003674 <__sfp>
 8003644:	2200      	movs	r2, #0
 8003646:	60e0      	str	r0, [r4, #12]
 8003648:	2104      	movs	r1, #4
 800364a:	6860      	ldr	r0, [r4, #4]
 800364c:	f7ff ff82 	bl	8003554 <std>
 8003650:	68a0      	ldr	r0, [r4, #8]
 8003652:	2201      	movs	r2, #1
 8003654:	2109      	movs	r1, #9
 8003656:	f7ff ff7d 	bl	8003554 <std>
 800365a:	68e0      	ldr	r0, [r4, #12]
 800365c:	2202      	movs	r2, #2
 800365e:	2112      	movs	r1, #18
 8003660:	f7ff ff78 	bl	8003554 <std>
 8003664:	2301      	movs	r3, #1
 8003666:	61a3      	str	r3, [r4, #24]
 8003668:	e7d2      	b.n	8003610 <__sinit+0xc>
 800366a:	bf00      	nop
 800366c:	0800452c 	.word	0x0800452c
 8003670:	0800359d 	.word	0x0800359d

08003674 <__sfp>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	4607      	mov	r7, r0
 8003678:	f7ff ffac 	bl	80035d4 <__sfp_lock_acquire>
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <__sfp+0x84>)
 800367e:	681e      	ldr	r6, [r3, #0]
 8003680:	69b3      	ldr	r3, [r6, #24]
 8003682:	b913      	cbnz	r3, 800368a <__sfp+0x16>
 8003684:	4630      	mov	r0, r6
 8003686:	f7ff ffbd 	bl	8003604 <__sinit>
 800368a:	3648      	adds	r6, #72	; 0x48
 800368c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	d503      	bpl.n	800369c <__sfp+0x28>
 8003694:	6833      	ldr	r3, [r6, #0]
 8003696:	b30b      	cbz	r3, 80036dc <__sfp+0x68>
 8003698:	6836      	ldr	r6, [r6, #0]
 800369a:	e7f7      	b.n	800368c <__sfp+0x18>
 800369c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036a0:	b9d5      	cbnz	r5, 80036d8 <__sfp+0x64>
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <__sfp+0x88>)
 80036a4:	60e3      	str	r3, [r4, #12]
 80036a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036aa:	6665      	str	r5, [r4, #100]	; 0x64
 80036ac:	f000 f847 	bl	800373e <__retarget_lock_init_recursive>
 80036b0:	f7ff ff96 	bl	80035e0 <__sfp_lock_release>
 80036b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036bc:	6025      	str	r5, [r4, #0]
 80036be:	61a5      	str	r5, [r4, #24]
 80036c0:	2208      	movs	r2, #8
 80036c2:	4629      	mov	r1, r5
 80036c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036c8:	f7ff ff0e 	bl	80034e8 <memset>
 80036cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036d4:	4620      	mov	r0, r4
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	3468      	adds	r4, #104	; 0x68
 80036da:	e7d9      	b.n	8003690 <__sfp+0x1c>
 80036dc:	2104      	movs	r1, #4
 80036de:	4638      	mov	r0, r7
 80036e0:	f7ff ff62 	bl	80035a8 <__sfmoreglue>
 80036e4:	4604      	mov	r4, r0
 80036e6:	6030      	str	r0, [r6, #0]
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d1d5      	bne.n	8003698 <__sfp+0x24>
 80036ec:	f7ff ff78 	bl	80035e0 <__sfp_lock_release>
 80036f0:	230c      	movs	r3, #12
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	e7ee      	b.n	80036d4 <__sfp+0x60>
 80036f6:	bf00      	nop
 80036f8:	0800452c 	.word	0x0800452c
 80036fc:	ffff0001 	.word	0xffff0001

08003700 <_fwalk_reent>:
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003704:	4606      	mov	r6, r0
 8003706:	4688      	mov	r8, r1
 8003708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800370c:	2700      	movs	r7, #0
 800370e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003712:	f1b9 0901 	subs.w	r9, r9, #1
 8003716:	d505      	bpl.n	8003724 <_fwalk_reent+0x24>
 8003718:	6824      	ldr	r4, [r4, #0]
 800371a:	2c00      	cmp	r4, #0
 800371c:	d1f7      	bne.n	800370e <_fwalk_reent+0xe>
 800371e:	4638      	mov	r0, r7
 8003720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003724:	89ab      	ldrh	r3, [r5, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d907      	bls.n	800373a <_fwalk_reent+0x3a>
 800372a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800372e:	3301      	adds	r3, #1
 8003730:	d003      	beq.n	800373a <_fwalk_reent+0x3a>
 8003732:	4629      	mov	r1, r5
 8003734:	4630      	mov	r0, r6
 8003736:	47c0      	blx	r8
 8003738:	4307      	orrs	r7, r0
 800373a:	3568      	adds	r5, #104	; 0x68
 800373c:	e7e9      	b.n	8003712 <_fwalk_reent+0x12>

0800373e <__retarget_lock_init_recursive>:
 800373e:	4770      	bx	lr

08003740 <__retarget_lock_acquire_recursive>:
 8003740:	4770      	bx	lr

08003742 <__retarget_lock_release_recursive>:
 8003742:	4770      	bx	lr

08003744 <sbrk_aligned>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4e0e      	ldr	r6, [pc, #56]	; (8003780 <sbrk_aligned+0x3c>)
 8003748:	460c      	mov	r4, r1
 800374a:	6831      	ldr	r1, [r6, #0]
 800374c:	4605      	mov	r5, r0
 800374e:	b911      	cbnz	r1, 8003756 <sbrk_aligned+0x12>
 8003750:	f000 fbc2 	bl	8003ed8 <_sbrk_r>
 8003754:	6030      	str	r0, [r6, #0]
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	f000 fbbd 	bl	8003ed8 <_sbrk_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d00a      	beq.n	8003778 <sbrk_aligned+0x34>
 8003762:	1cc4      	adds	r4, r0, #3
 8003764:	f024 0403 	bic.w	r4, r4, #3
 8003768:	42a0      	cmp	r0, r4
 800376a:	d007      	beq.n	800377c <sbrk_aligned+0x38>
 800376c:	1a21      	subs	r1, r4, r0
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fbb2 	bl	8003ed8 <_sbrk_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d101      	bne.n	800377c <sbrk_aligned+0x38>
 8003778:	f04f 34ff 	mov.w	r4, #4294967295
 800377c:	4620      	mov	r0, r4
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	200002c4 	.word	0x200002c4

08003784 <_malloc_r>:
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	1ccd      	adds	r5, r1, #3
 800378a:	f025 0503 	bic.w	r5, r5, #3
 800378e:	3508      	adds	r5, #8
 8003790:	2d0c      	cmp	r5, #12
 8003792:	bf38      	it	cc
 8003794:	250c      	movcc	r5, #12
 8003796:	2d00      	cmp	r5, #0
 8003798:	4607      	mov	r7, r0
 800379a:	db01      	blt.n	80037a0 <_malloc_r+0x1c>
 800379c:	42a9      	cmp	r1, r5
 800379e:	d905      	bls.n	80037ac <_malloc_r+0x28>
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	2600      	movs	r6, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ac:	4e2e      	ldr	r6, [pc, #184]	; (8003868 <_malloc_r+0xe4>)
 80037ae:	f000 fe03 	bl	80043b8 <__malloc_lock>
 80037b2:	6833      	ldr	r3, [r6, #0]
 80037b4:	461c      	mov	r4, r3
 80037b6:	bb34      	cbnz	r4, 8003806 <_malloc_r+0x82>
 80037b8:	4629      	mov	r1, r5
 80037ba:	4638      	mov	r0, r7
 80037bc:	f7ff ffc2 	bl	8003744 <sbrk_aligned>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	4604      	mov	r4, r0
 80037c4:	d14d      	bne.n	8003862 <_malloc_r+0xde>
 80037c6:	6834      	ldr	r4, [r6, #0]
 80037c8:	4626      	mov	r6, r4
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	d140      	bne.n	8003850 <_malloc_r+0xcc>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	4631      	mov	r1, r6
 80037d2:	4638      	mov	r0, r7
 80037d4:	eb04 0803 	add.w	r8, r4, r3
 80037d8:	f000 fb7e 	bl	8003ed8 <_sbrk_r>
 80037dc:	4580      	cmp	r8, r0
 80037de:	d13a      	bne.n	8003856 <_malloc_r+0xd2>
 80037e0:	6821      	ldr	r1, [r4, #0]
 80037e2:	3503      	adds	r5, #3
 80037e4:	1a6d      	subs	r5, r5, r1
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	4629      	mov	r1, r5
 80037f4:	4638      	mov	r0, r7
 80037f6:	f7ff ffa5 	bl	8003744 <sbrk_aligned>
 80037fa:	3001      	adds	r0, #1
 80037fc:	d02b      	beq.n	8003856 <_malloc_r+0xd2>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	442b      	add	r3, r5
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	e00e      	b.n	8003824 <_malloc_r+0xa0>
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	1b52      	subs	r2, r2, r5
 800380a:	d41e      	bmi.n	800384a <_malloc_r+0xc6>
 800380c:	2a0b      	cmp	r2, #11
 800380e:	d916      	bls.n	800383e <_malloc_r+0xba>
 8003810:	1961      	adds	r1, r4, r5
 8003812:	42a3      	cmp	r3, r4
 8003814:	6025      	str	r5, [r4, #0]
 8003816:	bf18      	it	ne
 8003818:	6059      	strne	r1, [r3, #4]
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	bf08      	it	eq
 800381e:	6031      	streq	r1, [r6, #0]
 8003820:	5162      	str	r2, [r4, r5]
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	4638      	mov	r0, r7
 8003826:	f104 060b 	add.w	r6, r4, #11
 800382a:	f000 fdcb 	bl	80043c4 <__malloc_unlock>
 800382e:	f026 0607 	bic.w	r6, r6, #7
 8003832:	1d23      	adds	r3, r4, #4
 8003834:	1af2      	subs	r2, r6, r3
 8003836:	d0b6      	beq.n	80037a6 <_malloc_r+0x22>
 8003838:	1b9b      	subs	r3, r3, r6
 800383a:	50a3      	str	r3, [r4, r2]
 800383c:	e7b3      	b.n	80037a6 <_malloc_r+0x22>
 800383e:	6862      	ldr	r2, [r4, #4]
 8003840:	42a3      	cmp	r3, r4
 8003842:	bf0c      	ite	eq
 8003844:	6032      	streq	r2, [r6, #0]
 8003846:	605a      	strne	r2, [r3, #4]
 8003848:	e7ec      	b.n	8003824 <_malloc_r+0xa0>
 800384a:	4623      	mov	r3, r4
 800384c:	6864      	ldr	r4, [r4, #4]
 800384e:	e7b2      	b.n	80037b6 <_malloc_r+0x32>
 8003850:	4634      	mov	r4, r6
 8003852:	6876      	ldr	r6, [r6, #4]
 8003854:	e7b9      	b.n	80037ca <_malloc_r+0x46>
 8003856:	230c      	movs	r3, #12
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4638      	mov	r0, r7
 800385c:	f000 fdb2 	bl	80043c4 <__malloc_unlock>
 8003860:	e7a1      	b.n	80037a6 <_malloc_r+0x22>
 8003862:	6025      	str	r5, [r4, #0]
 8003864:	e7de      	b.n	8003824 <_malloc_r+0xa0>
 8003866:	bf00      	nop
 8003868:	200002c0 	.word	0x200002c0

0800386c <__sfputc_r>:
 800386c:	6893      	ldr	r3, [r2, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	b410      	push	{r4}
 8003874:	6093      	str	r3, [r2, #8]
 8003876:	da08      	bge.n	800388a <__sfputc_r+0x1e>
 8003878:	6994      	ldr	r4, [r2, #24]
 800387a:	42a3      	cmp	r3, r4
 800387c:	db01      	blt.n	8003882 <__sfputc_r+0x16>
 800387e:	290a      	cmp	r1, #10
 8003880:	d103      	bne.n	800388a <__sfputc_r+0x1e>
 8003882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003886:	f000 bb7b 	b.w	8003f80 <__swbuf_r>
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	1c58      	adds	r0, r3, #1
 800388e:	6010      	str	r0, [r2, #0]
 8003890:	7019      	strb	r1, [r3, #0]
 8003892:	4608      	mov	r0, r1
 8003894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003898:	4770      	bx	lr

0800389a <__sfputs_r>:
 800389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389c:	4606      	mov	r6, r0
 800389e:	460f      	mov	r7, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	18d5      	adds	r5, r2, r3
 80038a4:	42ac      	cmp	r4, r5
 80038a6:	d101      	bne.n	80038ac <__sfputs_r+0x12>
 80038a8:	2000      	movs	r0, #0
 80038aa:	e007      	b.n	80038bc <__sfputs_r+0x22>
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	463a      	mov	r2, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7ff ffda 	bl	800386c <__sfputc_r>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d1f3      	bne.n	80038a4 <__sfputs_r+0xa>
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c0 <_vfiprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	460d      	mov	r5, r1
 80038c6:	b09d      	sub	sp, #116	; 0x74
 80038c8:	4614      	mov	r4, r2
 80038ca:	4698      	mov	r8, r3
 80038cc:	4606      	mov	r6, r0
 80038ce:	b118      	cbz	r0, 80038d8 <_vfiprintf_r+0x18>
 80038d0:	6983      	ldr	r3, [r0, #24]
 80038d2:	b90b      	cbnz	r3, 80038d8 <_vfiprintf_r+0x18>
 80038d4:	f7ff fe96 	bl	8003604 <__sinit>
 80038d8:	4b89      	ldr	r3, [pc, #548]	; (8003b00 <_vfiprintf_r+0x240>)
 80038da:	429d      	cmp	r5, r3
 80038dc:	d11b      	bne.n	8003916 <_vfiprintf_r+0x56>
 80038de:	6875      	ldr	r5, [r6, #4]
 80038e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	d405      	bmi.n	80038f2 <_vfiprintf_r+0x32>
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	059a      	lsls	r2, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_vfiprintf_r+0x32>
 80038ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ee:	f7ff ff27 	bl	8003740 <__retarget_lock_acquire_recursive>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	d501      	bpl.n	80038fc <_vfiprintf_r+0x3c>
 80038f8:	692b      	ldr	r3, [r5, #16]
 80038fa:	b9eb      	cbnz	r3, 8003938 <_vfiprintf_r+0x78>
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fba2 	bl	8004048 <__swsetup_r>
 8003904:	b1c0      	cbz	r0, 8003938 <_vfiprintf_r+0x78>
 8003906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003908:	07dc      	lsls	r4, r3, #31
 800390a:	d50e      	bpl.n	800392a <_vfiprintf_r+0x6a>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	b01d      	add	sp, #116	; 0x74
 8003912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003916:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <_vfiprintf_r+0x244>)
 8003918:	429d      	cmp	r5, r3
 800391a:	d101      	bne.n	8003920 <_vfiprintf_r+0x60>
 800391c:	68b5      	ldr	r5, [r6, #8]
 800391e:	e7df      	b.n	80038e0 <_vfiprintf_r+0x20>
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <_vfiprintf_r+0x248>)
 8003922:	429d      	cmp	r5, r3
 8003924:	bf08      	it	eq
 8003926:	68f5      	ldreq	r5, [r6, #12]
 8003928:	e7da      	b.n	80038e0 <_vfiprintf_r+0x20>
 800392a:	89ab      	ldrh	r3, [r5, #12]
 800392c:	0598      	lsls	r0, r3, #22
 800392e:	d4ed      	bmi.n	800390c <_vfiprintf_r+0x4c>
 8003930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003932:	f7ff ff06 	bl	8003742 <__retarget_lock_release_recursive>
 8003936:	e7e9      	b.n	800390c <_vfiprintf_r+0x4c>
 8003938:	2300      	movs	r3, #0
 800393a:	9309      	str	r3, [sp, #36]	; 0x24
 800393c:	2320      	movs	r3, #32
 800393e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003942:	f8cd 800c 	str.w	r8, [sp, #12]
 8003946:	2330      	movs	r3, #48	; 0x30
 8003948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b0c <_vfiprintf_r+0x24c>
 800394c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003950:	f04f 0901 	mov.w	r9, #1
 8003954:	4623      	mov	r3, r4
 8003956:	469a      	mov	sl, r3
 8003958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395c:	b10a      	cbz	r2, 8003962 <_vfiprintf_r+0xa2>
 800395e:	2a25      	cmp	r2, #37	; 0x25
 8003960:	d1f9      	bne.n	8003956 <_vfiprintf_r+0x96>
 8003962:	ebba 0b04 	subs.w	fp, sl, r4
 8003966:	d00b      	beq.n	8003980 <_vfiprintf_r+0xc0>
 8003968:	465b      	mov	r3, fp
 800396a:	4622      	mov	r2, r4
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f7ff ff93 	bl	800389a <__sfputs_r>
 8003974:	3001      	adds	r0, #1
 8003976:	f000 80aa 	beq.w	8003ace <_vfiprintf_r+0x20e>
 800397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397c:	445a      	add	r2, fp
 800397e:	9209      	str	r2, [sp, #36]	; 0x24
 8003980:	f89a 3000 	ldrb.w	r3, [sl]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a2 	beq.w	8003ace <_vfiprintf_r+0x20e>
 800398a:	2300      	movs	r3, #0
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003994:	f10a 0a01 	add.w	sl, sl, #1
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a0:	931a      	str	r3, [sp, #104]	; 0x68
 80039a2:	4654      	mov	r4, sl
 80039a4:	2205      	movs	r2, #5
 80039a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039aa:	4858      	ldr	r0, [pc, #352]	; (8003b0c <_vfiprintf_r+0x24c>)
 80039ac:	f7fc fc10 	bl	80001d0 <memchr>
 80039b0:	9a04      	ldr	r2, [sp, #16]
 80039b2:	b9d8      	cbnz	r0, 80039ec <_vfiprintf_r+0x12c>
 80039b4:	06d1      	lsls	r1, r2, #27
 80039b6:	bf44      	itt	mi
 80039b8:	2320      	movmi	r3, #32
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039be:	0713      	lsls	r3, r2, #28
 80039c0:	bf44      	itt	mi
 80039c2:	232b      	movmi	r3, #43	; 0x2b
 80039c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c8:	f89a 3000 	ldrb.w	r3, [sl]
 80039cc:	2b2a      	cmp	r3, #42	; 0x2a
 80039ce:	d015      	beq.n	80039fc <_vfiprintf_r+0x13c>
 80039d0:	9a07      	ldr	r2, [sp, #28]
 80039d2:	4654      	mov	r4, sl
 80039d4:	2000      	movs	r0, #0
 80039d6:	f04f 0c0a 	mov.w	ip, #10
 80039da:	4621      	mov	r1, r4
 80039dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e0:	3b30      	subs	r3, #48	; 0x30
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	d94e      	bls.n	8003a84 <_vfiprintf_r+0x1c4>
 80039e6:	b1b0      	cbz	r0, 8003a16 <_vfiprintf_r+0x156>
 80039e8:	9207      	str	r2, [sp, #28]
 80039ea:	e014      	b.n	8003a16 <_vfiprintf_r+0x156>
 80039ec:	eba0 0308 	sub.w	r3, r0, r8
 80039f0:	fa09 f303 	lsl.w	r3, r9, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	46a2      	mov	sl, r4
 80039fa:	e7d2      	b.n	80039a2 <_vfiprintf_r+0xe2>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	9103      	str	r1, [sp, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bfbb      	ittet	lt
 8003a08:	425b      	neglt	r3, r3
 8003a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0e:	9307      	strge	r3, [sp, #28]
 8003a10:	9307      	strlt	r3, [sp, #28]
 8003a12:	bfb8      	it	lt
 8003a14:	9204      	strlt	r2, [sp, #16]
 8003a16:	7823      	ldrb	r3, [r4, #0]
 8003a18:	2b2e      	cmp	r3, #46	; 0x2e
 8003a1a:	d10c      	bne.n	8003a36 <_vfiprintf_r+0x176>
 8003a1c:	7863      	ldrb	r3, [r4, #1]
 8003a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a20:	d135      	bne.n	8003a8e <_vfiprintf_r+0x1ce>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9203      	str	r2, [sp, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a32:	3402      	adds	r4, #2
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b1c <_vfiprintf_r+0x25c>
 8003a3a:	7821      	ldrb	r1, [r4, #0]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f7fc fbc6 	bl	80001d0 <memchr>
 8003a44:	b140      	cbz	r0, 8003a58 <_vfiprintf_r+0x198>
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	eba0 000a 	sub.w	r0, r0, sl
 8003a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a50:	9b04      	ldr	r3, [sp, #16]
 8003a52:	4303      	orrs	r3, r0
 8003a54:	3401      	adds	r4, #1
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5c:	482c      	ldr	r0, [pc, #176]	; (8003b10 <_vfiprintf_r+0x250>)
 8003a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a62:	2206      	movs	r2, #6
 8003a64:	f7fc fbb4 	bl	80001d0 <memchr>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d03f      	beq.n	8003aec <_vfiprintf_r+0x22c>
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <_vfiprintf_r+0x254>)
 8003a6e:	bb1b      	cbnz	r3, 8003ab8 <_vfiprintf_r+0x1f8>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	3307      	adds	r3, #7
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	3308      	adds	r3, #8
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7e:	443b      	add	r3, r7
 8003a80:	9309      	str	r3, [sp, #36]	; 0x24
 8003a82:	e767      	b.n	8003954 <_vfiprintf_r+0x94>
 8003a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a88:	460c      	mov	r4, r1
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e7a5      	b.n	80039da <_vfiprintf_r+0x11a>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	3401      	adds	r4, #1
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f04f 0c0a 	mov.w	ip, #10
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa0:	3a30      	subs	r2, #48	; 0x30
 8003aa2:	2a09      	cmp	r2, #9
 8003aa4:	d903      	bls.n	8003aae <_vfiprintf_r+0x1ee>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0c5      	beq.n	8003a36 <_vfiprintf_r+0x176>
 8003aaa:	9105      	str	r1, [sp, #20]
 8003aac:	e7c3      	b.n	8003a36 <_vfiprintf_r+0x176>
 8003aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e7f0      	b.n	8003a9a <_vfiprintf_r+0x1da>
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <_vfiprintf_r+0x258>)
 8003ac0:	a904      	add	r1, sp, #16
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	4607      	mov	r7, r0
 8003aca:	1c78      	adds	r0, r7, #1
 8003acc:	d1d6      	bne.n	8003a7c <_vfiprintf_r+0x1bc>
 8003ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ad0:	07d9      	lsls	r1, r3, #31
 8003ad2:	d405      	bmi.n	8003ae0 <_vfiprintf_r+0x220>
 8003ad4:	89ab      	ldrh	r3, [r5, #12]
 8003ad6:	059a      	lsls	r2, r3, #22
 8003ad8:	d402      	bmi.n	8003ae0 <_vfiprintf_r+0x220>
 8003ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003adc:	f7ff fe31 	bl	8003742 <__retarget_lock_release_recursive>
 8003ae0:	89ab      	ldrh	r3, [r5, #12]
 8003ae2:	065b      	lsls	r3, r3, #25
 8003ae4:	f53f af12 	bmi.w	800390c <_vfiprintf_r+0x4c>
 8003ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aea:	e711      	b.n	8003910 <_vfiprintf_r+0x50>
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462a      	mov	r2, r5
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <_vfiprintf_r+0x258>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f880 	bl	8003bfc <_printf_i>
 8003afc:	e7e4      	b.n	8003ac8 <_vfiprintf_r+0x208>
 8003afe:	bf00      	nop
 8003b00:	08004550 	.word	0x08004550
 8003b04:	08004570 	.word	0x08004570
 8003b08:	08004530 	.word	0x08004530
 8003b0c:	08004590 	.word	0x08004590
 8003b10:	0800459a 	.word	0x0800459a
 8003b14:	00000000 	.word	0x00000000
 8003b18:	0800389b 	.word	0x0800389b
 8003b1c:	08004596 	.word	0x08004596

08003b20 <_printf_common>:
 8003b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	4616      	mov	r6, r2
 8003b26:	4699      	mov	r9, r3
 8003b28:	688a      	ldr	r2, [r1, #8]
 8003b2a:	690b      	ldr	r3, [r1, #16]
 8003b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bfb8      	it	lt
 8003b34:	4613      	movlt	r3, r2
 8003b36:	6033      	str	r3, [r6, #0]
 8003b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	b10a      	cbz	r2, 8003b46 <_printf_common+0x26>
 8003b42:	3301      	adds	r3, #1
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	0699      	lsls	r1, r3, #26
 8003b4a:	bf42      	ittt	mi
 8003b4c:	6833      	ldrmi	r3, [r6, #0]
 8003b4e:	3302      	addmi	r3, #2
 8003b50:	6033      	strmi	r3, [r6, #0]
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	f015 0506 	ands.w	r5, r5, #6
 8003b58:	d106      	bne.n	8003b68 <_printf_common+0x48>
 8003b5a:	f104 0a19 	add.w	sl, r4, #25
 8003b5e:	68e3      	ldr	r3, [r4, #12]
 8003b60:	6832      	ldr	r2, [r6, #0]
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	42ab      	cmp	r3, r5
 8003b66:	dc26      	bgt.n	8003bb6 <_printf_common+0x96>
 8003b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b6c:	1e13      	subs	r3, r2, #0
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	bf18      	it	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	0692      	lsls	r2, r2, #26
 8003b76:	d42b      	bmi.n	8003bd0 <_printf_common+0xb0>
 8003b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4638      	mov	r0, r7
 8003b80:	47c0      	blx	r8
 8003b82:	3001      	adds	r0, #1
 8003b84:	d01e      	beq.n	8003bc4 <_printf_common+0xa4>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	68e5      	ldr	r5, [r4, #12]
 8003b8a:	6832      	ldr	r2, [r6, #0]
 8003b8c:	f003 0306 	and.w	r3, r3, #6
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	bf08      	it	eq
 8003b94:	1aad      	subeq	r5, r5, r2
 8003b96:	68a3      	ldr	r3, [r4, #8]
 8003b98:	6922      	ldr	r2, [r4, #16]
 8003b9a:	bf0c      	ite	eq
 8003b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba0:	2500      	movne	r5, #0
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	bfc4      	itt	gt
 8003ba6:	1a9b      	subgt	r3, r3, r2
 8003ba8:	18ed      	addgt	r5, r5, r3
 8003baa:	2600      	movs	r6, #0
 8003bac:	341a      	adds	r4, #26
 8003bae:	42b5      	cmp	r5, r6
 8003bb0:	d11a      	bne.n	8003be8 <_printf_common+0xc8>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e008      	b.n	8003bc8 <_printf_common+0xa8>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	47c0      	blx	r8
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d103      	bne.n	8003bcc <_printf_common+0xac>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7c6      	b.n	8003b5e <_printf_common+0x3e>
 8003bd0:	18e1      	adds	r1, r4, r3
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	2030      	movs	r0, #48	; 0x30
 8003bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bda:	4422      	add	r2, r4
 8003bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be4:	3302      	adds	r3, #2
 8003be6:	e7c7      	b.n	8003b78 <_printf_common+0x58>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0e6      	beq.n	8003bc4 <_printf_common+0xa4>
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7d9      	b.n	8003bae <_printf_common+0x8e>
	...

08003bfc <_printf_i>:
 8003bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c00:	7e0f      	ldrb	r7, [r1, #24]
 8003c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c04:	2f78      	cmp	r7, #120	; 0x78
 8003c06:	4691      	mov	r9, r2
 8003c08:	4680      	mov	r8, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	469a      	mov	sl, r3
 8003c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c12:	d807      	bhi.n	8003c24 <_printf_i+0x28>
 8003c14:	2f62      	cmp	r7, #98	; 0x62
 8003c16:	d80a      	bhi.n	8003c2e <_printf_i+0x32>
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	f000 80d8 	beq.w	8003dce <_printf_i+0x1d2>
 8003c1e:	2f58      	cmp	r7, #88	; 0x58
 8003c20:	f000 80a3 	beq.w	8003d6a <_printf_i+0x16e>
 8003c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c2c:	e03a      	b.n	8003ca4 <_printf_i+0xa8>
 8003c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c32:	2b15      	cmp	r3, #21
 8003c34:	d8f6      	bhi.n	8003c24 <_printf_i+0x28>
 8003c36:	a101      	add	r1, pc, #4	; (adr r1, 8003c3c <_printf_i+0x40>)
 8003c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003c25 	.word	0x08003c25
 8003c48:	08003c25 	.word	0x08003c25
 8003c4c:	08003c25 	.word	0x08003c25
 8003c50:	08003c25 	.word	0x08003c25
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003c25 	.word	0x08003c25
 8003c5c:	08003c25 	.word	0x08003c25
 8003c60:	08003c25 	.word	0x08003c25
 8003c64:	08003c25 	.word	0x08003c25
 8003c68:	08003db5 	.word	0x08003db5
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003d97 	.word	0x08003d97
 8003c74:	08003c25 	.word	0x08003c25
 8003c78:	08003c25 	.word	0x08003c25
 8003c7c:	08003dd7 	.word	0x08003dd7
 8003c80:	08003c25 	.word	0x08003c25
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003c25 	.word	0x08003c25
 8003c8c:	08003c25 	.word	0x08003c25
 8003c90:	08003d9f 	.word	0x08003d9f
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	602a      	str	r2, [r5, #0]
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0a3      	b.n	8003df0 <_printf_i+0x1f4>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	6829      	ldr	r1, [r5, #0]
 8003cac:	0606      	lsls	r6, r0, #24
 8003cae:	f101 0304 	add.w	r3, r1, #4
 8003cb2:	d50a      	bpl.n	8003cca <_printf_i+0xce>
 8003cb4:	680e      	ldr	r6, [r1, #0]
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	da03      	bge.n	8003cc4 <_printf_i+0xc8>
 8003cbc:	232d      	movs	r3, #45	; 0x2d
 8003cbe:	4276      	negs	r6, r6
 8003cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc4:	485e      	ldr	r0, [pc, #376]	; (8003e40 <_printf_i+0x244>)
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	e019      	b.n	8003cfe <_printf_i+0x102>
 8003cca:	680e      	ldr	r6, [r1, #0]
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cd2:	bf18      	it	ne
 8003cd4:	b236      	sxthne	r6, r6
 8003cd6:	e7ef      	b.n	8003cb8 <_printf_i+0xbc>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	6029      	str	r1, [r5, #0]
 8003ce0:	0601      	lsls	r1, r0, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xec>
 8003ce4:	681e      	ldr	r6, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0xf2>
 8003ce8:	0646      	lsls	r6, r0, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xe8>
 8003cec:	881e      	ldrh	r6, [r3, #0]
 8003cee:	4854      	ldr	r0, [pc, #336]	; (8003e40 <_printf_i+0x244>)
 8003cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2308      	moveq	r3, #8
 8003cf6:	230a      	movne	r3, #10
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	60a5      	str	r5, [r4, #8]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	bfa2      	ittt	ge
 8003d06:	6821      	ldrge	r1, [r4, #0]
 8003d08:	f021 0104 	bicge.w	r1, r1, #4
 8003d0c:	6021      	strge	r1, [r4, #0]
 8003d0e:	b90e      	cbnz	r6, 8003d14 <_printf_i+0x118>
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	d04d      	beq.n	8003db0 <_printf_i+0x1b4>
 8003d14:	4615      	mov	r5, r2
 8003d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d1e:	5dc7      	ldrb	r7, [r0, r7]
 8003d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d24:	4637      	mov	r7, r6
 8003d26:	42bb      	cmp	r3, r7
 8003d28:	460e      	mov	r6, r1
 8003d2a:	d9f4      	bls.n	8003d16 <_printf_i+0x11a>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10b      	bne.n	8003d48 <_printf_i+0x14c>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	07de      	lsls	r6, r3, #31
 8003d34:	d508      	bpl.n	8003d48 <_printf_i+0x14c>
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	6861      	ldr	r1, [r4, #4]
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	bfde      	ittt	le
 8003d3e:	2330      	movle	r3, #48	; 0x30
 8003d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d48:	1b52      	subs	r2, r2, r5
 8003d4a:	6122      	str	r2, [r4, #16]
 8003d4c:	f8cd a000 	str.w	sl, [sp]
 8003d50:	464b      	mov	r3, r9
 8003d52:	aa03      	add	r2, sp, #12
 8003d54:	4621      	mov	r1, r4
 8003d56:	4640      	mov	r0, r8
 8003d58:	f7ff fee2 	bl	8003b20 <_printf_common>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d14c      	bne.n	8003dfa <_printf_i+0x1fe>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b004      	add	sp, #16
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6a:	4835      	ldr	r0, [pc, #212]	; (8003e40 <_printf_i+0x244>)
 8003d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d70:	6829      	ldr	r1, [r5, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d78:	6029      	str	r1, [r5, #0]
 8003d7a:	061d      	lsls	r5, r3, #24
 8003d7c:	d514      	bpl.n	8003da8 <_printf_i+0x1ac>
 8003d7e:	07df      	lsls	r7, r3, #31
 8003d80:	bf44      	itt	mi
 8003d82:	f043 0320 	orrmi.w	r3, r3, #32
 8003d86:	6023      	strmi	r3, [r4, #0]
 8003d88:	b91e      	cbnz	r6, 8003d92 <_printf_i+0x196>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f023 0320 	bic.w	r3, r3, #32
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	2310      	movs	r3, #16
 8003d94:	e7b0      	b.n	8003cf8 <_printf_i+0xfc>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f043 0320 	orr.w	r3, r3, #32
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	2378      	movs	r3, #120	; 0x78
 8003da0:	4828      	ldr	r0, [pc, #160]	; (8003e44 <_printf_i+0x248>)
 8003da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da6:	e7e3      	b.n	8003d70 <_printf_i+0x174>
 8003da8:	0659      	lsls	r1, r3, #25
 8003daa:	bf48      	it	mi
 8003dac:	b2b6      	uxthmi	r6, r6
 8003dae:	e7e6      	b.n	8003d7e <_printf_i+0x182>
 8003db0:	4615      	mov	r5, r2
 8003db2:	e7bb      	b.n	8003d2c <_printf_i+0x130>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	6826      	ldr	r6, [r4, #0]
 8003db8:	6961      	ldr	r1, [r4, #20]
 8003dba:	1d18      	adds	r0, r3, #4
 8003dbc:	6028      	str	r0, [r5, #0]
 8003dbe:	0635      	lsls	r5, r6, #24
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	d501      	bpl.n	8003dc8 <_printf_i+0x1cc>
 8003dc4:	6019      	str	r1, [r3, #0]
 8003dc6:	e002      	b.n	8003dce <_printf_i+0x1d2>
 8003dc8:	0670      	lsls	r0, r6, #25
 8003dca:	d5fb      	bpl.n	8003dc4 <_printf_i+0x1c8>
 8003dcc:	8019      	strh	r1, [r3, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6123      	str	r3, [r4, #16]
 8003dd2:	4615      	mov	r5, r2
 8003dd4:	e7ba      	b.n	8003d4c <_printf_i+0x150>
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	1d1a      	adds	r2, r3, #4
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	681d      	ldr	r5, [r3, #0]
 8003dde:	6862      	ldr	r2, [r4, #4]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4628      	mov	r0, r5
 8003de4:	f7fc f9f4 	bl	80001d0 <memchr>
 8003de8:	b108      	cbz	r0, 8003dee <_printf_i+0x1f2>
 8003dea:	1b40      	subs	r0, r0, r5
 8003dec:	6060      	str	r0, [r4, #4]
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	2300      	movs	r3, #0
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df8:	e7a8      	b.n	8003d4c <_printf_i+0x150>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	4649      	mov	r1, r9
 8003e00:	4640      	mov	r0, r8
 8003e02:	47d0      	blx	sl
 8003e04:	3001      	adds	r0, #1
 8003e06:	d0ab      	beq.n	8003d60 <_printf_i+0x164>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	079b      	lsls	r3, r3, #30
 8003e0c:	d413      	bmi.n	8003e36 <_printf_i+0x23a>
 8003e0e:	68e0      	ldr	r0, [r4, #12]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	4298      	cmp	r0, r3
 8003e14:	bfb8      	it	lt
 8003e16:	4618      	movlt	r0, r3
 8003e18:	e7a4      	b.n	8003d64 <_printf_i+0x168>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4649      	mov	r1, r9
 8003e20:	4640      	mov	r0, r8
 8003e22:	47d0      	blx	sl
 8003e24:	3001      	adds	r0, #1
 8003e26:	d09b      	beq.n	8003d60 <_printf_i+0x164>
 8003e28:	3501      	adds	r5, #1
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	9903      	ldr	r1, [sp, #12]
 8003e2e:	1a5b      	subs	r3, r3, r1
 8003e30:	42ab      	cmp	r3, r5
 8003e32:	dcf2      	bgt.n	8003e1a <_printf_i+0x21e>
 8003e34:	e7eb      	b.n	8003e0e <_printf_i+0x212>
 8003e36:	2500      	movs	r5, #0
 8003e38:	f104 0619 	add.w	r6, r4, #25
 8003e3c:	e7f5      	b.n	8003e2a <_printf_i+0x22e>
 8003e3e:	bf00      	nop
 8003e40:	080045a1 	.word	0x080045a1
 8003e44:	080045b2 	.word	0x080045b2

08003e48 <_putc_r>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	4606      	mov	r6, r0
 8003e50:	b118      	cbz	r0, 8003e5a <_putc_r+0x12>
 8003e52:	6983      	ldr	r3, [r0, #24]
 8003e54:	b90b      	cbnz	r3, 8003e5a <_putc_r+0x12>
 8003e56:	f7ff fbd5 	bl	8003604 <__sinit>
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <_putc_r+0x84>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	d124      	bne.n	8003eaa <_putc_r+0x62>
 8003e60:	6874      	ldr	r4, [r6, #4]
 8003e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e64:	07d8      	lsls	r0, r3, #31
 8003e66:	d405      	bmi.n	8003e74 <_putc_r+0x2c>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	0599      	lsls	r1, r3, #22
 8003e6c:	d402      	bmi.n	8003e74 <_putc_r+0x2c>
 8003e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e70:	f7ff fc66 	bl	8003740 <__retarget_lock_acquire_recursive>
 8003e74:	68a3      	ldr	r3, [r4, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	60a3      	str	r3, [r4, #8]
 8003e7c:	da05      	bge.n	8003e8a <_putc_r+0x42>
 8003e7e:	69a2      	ldr	r2, [r4, #24]
 8003e80:	4293      	cmp	r3, r2
 8003e82:	db1c      	blt.n	8003ebe <_putc_r+0x76>
 8003e84:	b2eb      	uxtb	r3, r5
 8003e86:	2b0a      	cmp	r3, #10
 8003e88:	d019      	beq.n	8003ebe <_putc_r+0x76>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	6022      	str	r2, [r4, #0]
 8003e90:	701d      	strb	r5, [r3, #0]
 8003e92:	b2ed      	uxtb	r5, r5
 8003e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e96:	07da      	lsls	r2, r3, #31
 8003e98:	d405      	bmi.n	8003ea6 <_putc_r+0x5e>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	059b      	lsls	r3, r3, #22
 8003e9e:	d402      	bmi.n	8003ea6 <_putc_r+0x5e>
 8003ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea2:	f7ff fc4e 	bl	8003742 <__retarget_lock_release_recursive>
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <_putc_r+0x88>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d101      	bne.n	8003eb4 <_putc_r+0x6c>
 8003eb0:	68b4      	ldr	r4, [r6, #8]
 8003eb2:	e7d6      	b.n	8003e62 <_putc_r+0x1a>
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <_putc_r+0x8c>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	bf08      	it	eq
 8003eba:	68f4      	ldreq	r4, [r6, #12]
 8003ebc:	e7d1      	b.n	8003e62 <_putc_r+0x1a>
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f000 f85c 	bl	8003f80 <__swbuf_r>
 8003ec8:	4605      	mov	r5, r0
 8003eca:	e7e3      	b.n	8003e94 <_putc_r+0x4c>
 8003ecc:	08004550 	.word	0x08004550
 8003ed0:	08004570 	.word	0x08004570
 8003ed4:	08004530 	.word	0x08004530

08003ed8 <_sbrk_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	; (8003ef4 <_sbrk_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fd f83a 	bl	8000f5c <_sbrk>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_sbrk_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_sbrk_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	200002c8 	.word	0x200002c8

08003ef8 <__sread>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	460c      	mov	r4, r1
 8003efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f00:	f000 fab2 	bl	8004468 <_read_r>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	bfab      	itete	ge
 8003f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f0c:	181b      	addge	r3, r3, r0
 8003f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f12:	bfac      	ite	ge
 8003f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f16:	81a3      	strhlt	r3, [r4, #12]
 8003f18:	bd10      	pop	{r4, pc}

08003f1a <__swrite>:
 8003f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	461f      	mov	r7, r3
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	05db      	lsls	r3, r3, #23
 8003f24:	4605      	mov	r5, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4616      	mov	r6, r2
 8003f2a:	d505      	bpl.n	8003f38 <__swrite+0x1e>
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	2302      	movs	r3, #2
 8003f32:	2200      	movs	r2, #0
 8003f34:	f000 f9c8 	bl	80042c8 <_lseek_r>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	4632      	mov	r2, r6
 8003f46:	463b      	mov	r3, r7
 8003f48:	4628      	mov	r0, r5
 8003f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	f000 b869 	b.w	8004024 <_write_r>

08003f52 <__sseek>:
 8003f52:	b510      	push	{r4, lr}
 8003f54:	460c      	mov	r4, r1
 8003f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5a:	f000 f9b5 	bl	80042c8 <_lseek_r>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	bf15      	itete	ne
 8003f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f6e:	81a3      	strheq	r3, [r4, #12]
 8003f70:	bf18      	it	ne
 8003f72:	81a3      	strhne	r3, [r4, #12]
 8003f74:	bd10      	pop	{r4, pc}

08003f76 <__sclose>:
 8003f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7a:	f000 b8d3 	b.w	8004124 <_close_r>
	...

08003f80 <__swbuf_r>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	460e      	mov	r6, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	4605      	mov	r5, r0
 8003f88:	b118      	cbz	r0, 8003f92 <__swbuf_r+0x12>
 8003f8a:	6983      	ldr	r3, [r0, #24]
 8003f8c:	b90b      	cbnz	r3, 8003f92 <__swbuf_r+0x12>
 8003f8e:	f7ff fb39 	bl	8003604 <__sinit>
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <__swbuf_r+0x98>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	d12b      	bne.n	8003ff0 <__swbuf_r+0x70>
 8003f98:	686c      	ldr	r4, [r5, #4]
 8003f9a:	69a3      	ldr	r3, [r4, #24]
 8003f9c:	60a3      	str	r3, [r4, #8]
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	071a      	lsls	r2, r3, #28
 8003fa2:	d52f      	bpl.n	8004004 <__swbuf_r+0x84>
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	b36b      	cbz	r3, 8004004 <__swbuf_r+0x84>
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	1ac0      	subs	r0, r0, r3
 8003fae:	6963      	ldr	r3, [r4, #20]
 8003fb0:	b2f6      	uxtb	r6, r6
 8003fb2:	4283      	cmp	r3, r0
 8003fb4:	4637      	mov	r7, r6
 8003fb6:	dc04      	bgt.n	8003fc2 <__swbuf_r+0x42>
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 f948 	bl	8004250 <_fflush_r>
 8003fc0:	bb30      	cbnz	r0, 8004010 <__swbuf_r+0x90>
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	60a3      	str	r3, [r4, #8]
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	6022      	str	r2, [r4, #0]
 8003fce:	701e      	strb	r6, [r3, #0]
 8003fd0:	6963      	ldr	r3, [r4, #20]
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	4283      	cmp	r3, r0
 8003fd6:	d004      	beq.n	8003fe2 <__swbuf_r+0x62>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	07db      	lsls	r3, r3, #31
 8003fdc:	d506      	bpl.n	8003fec <__swbuf_r+0x6c>
 8003fde:	2e0a      	cmp	r6, #10
 8003fe0:	d104      	bne.n	8003fec <__swbuf_r+0x6c>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f933 	bl	8004250 <_fflush_r>
 8003fea:	b988      	cbnz	r0, 8004010 <__swbuf_r+0x90>
 8003fec:	4638      	mov	r0, r7
 8003fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <__swbuf_r+0x9c>)
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	d101      	bne.n	8003ffa <__swbuf_r+0x7a>
 8003ff6:	68ac      	ldr	r4, [r5, #8]
 8003ff8:	e7cf      	b.n	8003f9a <__swbuf_r+0x1a>
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <__swbuf_r+0xa0>)
 8003ffc:	429c      	cmp	r4, r3
 8003ffe:	bf08      	it	eq
 8004000:	68ec      	ldreq	r4, [r5, #12]
 8004002:	e7ca      	b.n	8003f9a <__swbuf_r+0x1a>
 8004004:	4621      	mov	r1, r4
 8004006:	4628      	mov	r0, r5
 8004008:	f000 f81e 	bl	8004048 <__swsetup_r>
 800400c:	2800      	cmp	r0, #0
 800400e:	d0cb      	beq.n	8003fa8 <__swbuf_r+0x28>
 8004010:	f04f 37ff 	mov.w	r7, #4294967295
 8004014:	e7ea      	b.n	8003fec <__swbuf_r+0x6c>
 8004016:	bf00      	nop
 8004018:	08004550 	.word	0x08004550
 800401c:	08004570 	.word	0x08004570
 8004020:	08004530 	.word	0x08004530

08004024 <_write_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d07      	ldr	r5, [pc, #28]	; (8004044 <_write_r+0x20>)
 8004028:	4604      	mov	r4, r0
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	2200      	movs	r2, #0
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc ff41 	bl	8000eba <_write>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_write_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_write_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	200002c8 	.word	0x200002c8

08004048 <__swsetup_r>:
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <__swsetup_r+0xcc>)
 800404a:	b570      	push	{r4, r5, r6, lr}
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	4606      	mov	r6, r0
 8004050:	460c      	mov	r4, r1
 8004052:	b125      	cbz	r5, 800405e <__swsetup_r+0x16>
 8004054:	69ab      	ldr	r3, [r5, #24]
 8004056:	b913      	cbnz	r3, 800405e <__swsetup_r+0x16>
 8004058:	4628      	mov	r0, r5
 800405a:	f7ff fad3 	bl	8003604 <__sinit>
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <__swsetup_r+0xd0>)
 8004060:	429c      	cmp	r4, r3
 8004062:	d10f      	bne.n	8004084 <__swsetup_r+0x3c>
 8004064:	686c      	ldr	r4, [r5, #4]
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800406c:	0719      	lsls	r1, r3, #28
 800406e:	d42c      	bmi.n	80040ca <__swsetup_r+0x82>
 8004070:	06dd      	lsls	r5, r3, #27
 8004072:	d411      	bmi.n	8004098 <__swsetup_r+0x50>
 8004074:	2309      	movs	r3, #9
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800407c:	81a3      	strh	r3, [r4, #12]
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	e03e      	b.n	8004102 <__swsetup_r+0xba>
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <__swsetup_r+0xd4>)
 8004086:	429c      	cmp	r4, r3
 8004088:	d101      	bne.n	800408e <__swsetup_r+0x46>
 800408a:	68ac      	ldr	r4, [r5, #8]
 800408c:	e7eb      	b.n	8004066 <__swsetup_r+0x1e>
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <__swsetup_r+0xd8>)
 8004090:	429c      	cmp	r4, r3
 8004092:	bf08      	it	eq
 8004094:	68ec      	ldreq	r4, [r5, #12]
 8004096:	e7e6      	b.n	8004066 <__swsetup_r+0x1e>
 8004098:	0758      	lsls	r0, r3, #29
 800409a:	d512      	bpl.n	80040c2 <__swsetup_r+0x7a>
 800409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409e:	b141      	cbz	r1, 80040b2 <__swsetup_r+0x6a>
 80040a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040a4:	4299      	cmp	r1, r3
 80040a6:	d002      	beq.n	80040ae <__swsetup_r+0x66>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 f991 	bl	80043d0 <_free_r>
 80040ae:	2300      	movs	r3, #0
 80040b0:	6363      	str	r3, [r4, #52]	; 0x34
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	2300      	movs	r3, #0
 80040bc:	6063      	str	r3, [r4, #4]
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	b94b      	cbnz	r3, 80040e2 <__swsetup_r+0x9a>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d003      	beq.n	80040e2 <__swsetup_r+0x9a>
 80040da:	4621      	mov	r1, r4
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f92b 	bl	8004338 <__smakebuf_r>
 80040e2:	89a0      	ldrh	r0, [r4, #12]
 80040e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040e8:	f010 0301 	ands.w	r3, r0, #1
 80040ec:	d00a      	beq.n	8004104 <__swsetup_r+0xbc>
 80040ee:	2300      	movs	r3, #0
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	6963      	ldr	r3, [r4, #20]
 80040f4:	425b      	negs	r3, r3
 80040f6:	61a3      	str	r3, [r4, #24]
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	b943      	cbnz	r3, 800410e <__swsetup_r+0xc6>
 80040fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004100:	d1ba      	bne.n	8004078 <__swsetup_r+0x30>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	0781      	lsls	r1, r0, #30
 8004106:	bf58      	it	pl
 8004108:	6963      	ldrpl	r3, [r4, #20]
 800410a:	60a3      	str	r3, [r4, #8]
 800410c:	e7f4      	b.n	80040f8 <__swsetup_r+0xb0>
 800410e:	2000      	movs	r0, #0
 8004110:	e7f7      	b.n	8004102 <__swsetup_r+0xba>
 8004112:	bf00      	nop
 8004114:	2000000c 	.word	0x2000000c
 8004118:	08004550 	.word	0x08004550
 800411c:	08004570 	.word	0x08004570
 8004120:	08004530 	.word	0x08004530

08004124 <_close_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d06      	ldr	r5, [pc, #24]	; (8004140 <_close_r+0x1c>)
 8004128:	2300      	movs	r3, #0
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fedf 	bl	8000ef2 <_close>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_close_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_close_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200002c8 	.word	0x200002c8

08004144 <__sflush_r>:
 8004144:	898a      	ldrh	r2, [r1, #12]
 8004146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	4605      	mov	r5, r0
 800414c:	0710      	lsls	r0, r2, #28
 800414e:	460c      	mov	r4, r1
 8004150:	d458      	bmi.n	8004204 <__sflush_r+0xc0>
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc05      	bgt.n	8004164 <__sflush_r+0x20>
 8004158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc02      	bgt.n	8004164 <__sflush_r+0x20>
 800415e:	2000      	movs	r0, #0
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004166:	2e00      	cmp	r6, #0
 8004168:	d0f9      	beq.n	800415e <__sflush_r+0x1a>
 800416a:	2300      	movs	r3, #0
 800416c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004170:	682f      	ldr	r7, [r5, #0]
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	d032      	beq.n	80041dc <__sflush_r+0x98>
 8004176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	075a      	lsls	r2, r3, #29
 800417c:	d505      	bpl.n	800418a <__sflush_r+0x46>
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	1ac0      	subs	r0, r0, r3
 8004182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004184:	b10b      	cbz	r3, 800418a <__sflush_r+0x46>
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	1ac0      	subs	r0, r0, r3
 800418a:	2300      	movs	r3, #0
 800418c:	4602      	mov	r2, r0
 800418e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	4628      	mov	r0, r5
 8004194:	47b0      	blx	r6
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	d106      	bne.n	80041aa <__sflush_r+0x66>
 800419c:	6829      	ldr	r1, [r5, #0]
 800419e:	291d      	cmp	r1, #29
 80041a0:	d82c      	bhi.n	80041fc <__sflush_r+0xb8>
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <__sflush_r+0x108>)
 80041a4:	40ca      	lsrs	r2, r1
 80041a6:	07d6      	lsls	r6, r2, #31
 80041a8:	d528      	bpl.n	80041fc <__sflush_r+0xb8>
 80041aa:	2200      	movs	r2, #0
 80041ac:	6062      	str	r2, [r4, #4]
 80041ae:	04d9      	lsls	r1, r3, #19
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	6022      	str	r2, [r4, #0]
 80041b4:	d504      	bpl.n	80041c0 <__sflush_r+0x7c>
 80041b6:	1c42      	adds	r2, r0, #1
 80041b8:	d101      	bne.n	80041be <__sflush_r+0x7a>
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	b903      	cbnz	r3, 80041c0 <__sflush_r+0x7c>
 80041be:	6560      	str	r0, [r4, #84]	; 0x54
 80041c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c2:	602f      	str	r7, [r5, #0]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d0ca      	beq.n	800415e <__sflush_r+0x1a>
 80041c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <__sflush_r+0x92>
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f8fd 	bl	80043d0 <_free_r>
 80041d6:	2000      	movs	r0, #0
 80041d8:	6360      	str	r0, [r4, #52]	; 0x34
 80041da:	e7c1      	b.n	8004160 <__sflush_r+0x1c>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	2301      	movs	r3, #1
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b0      	blx	r6
 80041e4:	1c41      	adds	r1, r0, #1
 80041e6:	d1c7      	bne.n	8004178 <__sflush_r+0x34>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0c4      	beq.n	8004178 <__sflush_r+0x34>
 80041ee:	2b1d      	cmp	r3, #29
 80041f0:	d001      	beq.n	80041f6 <__sflush_r+0xb2>
 80041f2:	2b16      	cmp	r3, #22
 80041f4:	d101      	bne.n	80041fa <__sflush_r+0xb6>
 80041f6:	602f      	str	r7, [r5, #0]
 80041f8:	e7b1      	b.n	800415e <__sflush_r+0x1a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e7ad      	b.n	8004160 <__sflush_r+0x1c>
 8004204:	690f      	ldr	r7, [r1, #16]
 8004206:	2f00      	cmp	r7, #0
 8004208:	d0a9      	beq.n	800415e <__sflush_r+0x1a>
 800420a:	0793      	lsls	r3, r2, #30
 800420c:	680e      	ldr	r6, [r1, #0]
 800420e:	bf08      	it	eq
 8004210:	694b      	ldreq	r3, [r1, #20]
 8004212:	600f      	str	r7, [r1, #0]
 8004214:	bf18      	it	ne
 8004216:	2300      	movne	r3, #0
 8004218:	eba6 0807 	sub.w	r8, r6, r7
 800421c:	608b      	str	r3, [r1, #8]
 800421e:	f1b8 0f00 	cmp.w	r8, #0
 8004222:	dd9c      	ble.n	800415e <__sflush_r+0x1a>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004228:	4643      	mov	r3, r8
 800422a:	463a      	mov	r2, r7
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	2800      	cmp	r0, #0
 8004232:	dc06      	bgt.n	8004242 <__sflush_r+0xfe>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e78e      	b.n	8004160 <__sflush_r+0x1c>
 8004242:	4407      	add	r7, r0
 8004244:	eba8 0800 	sub.w	r8, r8, r0
 8004248:	e7e9      	b.n	800421e <__sflush_r+0xda>
 800424a:	bf00      	nop
 800424c:	20400001 	.word	0x20400001

08004250 <_fflush_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4605      	mov	r5, r0
 8004256:	460c      	mov	r4, r1
 8004258:	b913      	cbnz	r3, 8004260 <_fflush_r+0x10>
 800425a:	2500      	movs	r5, #0
 800425c:	4628      	mov	r0, r5
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	b118      	cbz	r0, 800426a <_fflush_r+0x1a>
 8004262:	6983      	ldr	r3, [r0, #24]
 8004264:	b90b      	cbnz	r3, 800426a <_fflush_r+0x1a>
 8004266:	f7ff f9cd 	bl	8003604 <__sinit>
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <_fflush_r+0x6c>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d11b      	bne.n	80042a8 <_fflush_r+0x58>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <_fflush_r+0xa>
 800427a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800427c:	07d0      	lsls	r0, r2, #31
 800427e:	d404      	bmi.n	800428a <_fflush_r+0x3a>
 8004280:	0599      	lsls	r1, r3, #22
 8004282:	d402      	bmi.n	800428a <_fflush_r+0x3a>
 8004284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004286:	f7ff fa5b 	bl	8003740 <__retarget_lock_acquire_recursive>
 800428a:	4628      	mov	r0, r5
 800428c:	4621      	mov	r1, r4
 800428e:	f7ff ff59 	bl	8004144 <__sflush_r>
 8004292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004294:	07da      	lsls	r2, r3, #31
 8004296:	4605      	mov	r5, r0
 8004298:	d4e0      	bmi.n	800425c <_fflush_r+0xc>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d4dd      	bmi.n	800425c <_fflush_r+0xc>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f7ff fa4e 	bl	8003742 <__retarget_lock_release_recursive>
 80042a6:	e7d9      	b.n	800425c <_fflush_r+0xc>
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_fflush_r+0x70>)
 80042aa:	429c      	cmp	r4, r3
 80042ac:	d101      	bne.n	80042b2 <_fflush_r+0x62>
 80042ae:	68ac      	ldr	r4, [r5, #8]
 80042b0:	e7df      	b.n	8004272 <_fflush_r+0x22>
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <_fflush_r+0x74>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	bf08      	it	eq
 80042b8:	68ec      	ldreq	r4, [r5, #12]
 80042ba:	e7da      	b.n	8004272 <_fflush_r+0x22>
 80042bc:	08004550 	.word	0x08004550
 80042c0:	08004570 	.word	0x08004570
 80042c4:	08004530 	.word	0x08004530

080042c8 <_lseek_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_lseek_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fc fe32 	bl	8000f40 <_lseek>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_lseek_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_lseek_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	200002c8 	.word	0x200002c8

080042ec <__swhatbuf_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	460e      	mov	r6, r1
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	2900      	cmp	r1, #0
 80042f6:	b096      	sub	sp, #88	; 0x58
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	da08      	bge.n	8004310 <__swhatbuf_r+0x24>
 80042fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	602a      	str	r2, [r5, #0]
 8004306:	061a      	lsls	r2, r3, #24
 8004308:	d410      	bmi.n	800432c <__swhatbuf_r+0x40>
 800430a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430e:	e00e      	b.n	800432e <__swhatbuf_r+0x42>
 8004310:	466a      	mov	r2, sp
 8004312:	f000 f8bb 	bl	800448c <_fstat_r>
 8004316:	2800      	cmp	r0, #0
 8004318:	dbf1      	blt.n	80042fe <__swhatbuf_r+0x12>
 800431a:	9a01      	ldr	r2, [sp, #4]
 800431c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004324:	425a      	negs	r2, r3
 8004326:	415a      	adcs	r2, r3
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	e7ee      	b.n	800430a <__swhatbuf_r+0x1e>
 800432c:	2340      	movs	r3, #64	; 0x40
 800432e:	2000      	movs	r0, #0
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	b016      	add	sp, #88	; 0x58
 8004334:	bd70      	pop	{r4, r5, r6, pc}
	...

08004338 <__smakebuf_r>:
 8004338:	898b      	ldrh	r3, [r1, #12]
 800433a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800433c:	079d      	lsls	r5, r3, #30
 800433e:	4606      	mov	r6, r0
 8004340:	460c      	mov	r4, r1
 8004342:	d507      	bpl.n	8004354 <__smakebuf_r+0x1c>
 8004344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2301      	movs	r3, #1
 800434e:	6163      	str	r3, [r4, #20]
 8004350:	b002      	add	sp, #8
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	ab01      	add	r3, sp, #4
 8004356:	466a      	mov	r2, sp
 8004358:	f7ff ffc8 	bl	80042ec <__swhatbuf_r>
 800435c:	9900      	ldr	r1, [sp, #0]
 800435e:	4605      	mov	r5, r0
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff fa0f 	bl	8003784 <_malloc_r>
 8004366:	b948      	cbnz	r0, 800437c <__smakebuf_r+0x44>
 8004368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436c:	059a      	lsls	r2, r3, #22
 800436e:	d4ef      	bmi.n	8004350 <__smakebuf_r+0x18>
 8004370:	f023 0303 	bic.w	r3, r3, #3
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	e7e3      	b.n	8004344 <__smakebuf_r+0xc>
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <__smakebuf_r+0x7c>)
 800437e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	6020      	str	r0, [r4, #0]
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	9b00      	ldr	r3, [sp, #0]
 800438c:	6163      	str	r3, [r4, #20]
 800438e:	9b01      	ldr	r3, [sp, #4]
 8004390:	6120      	str	r0, [r4, #16]
 8004392:	b15b      	cbz	r3, 80043ac <__smakebuf_r+0x74>
 8004394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f889 	bl	80044b0 <_isatty_r>
 800439e:	b128      	cbz	r0, 80043ac <__smakebuf_r+0x74>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	89a0      	ldrh	r0, [r4, #12]
 80043ae:	4305      	orrs	r5, r0
 80043b0:	81a5      	strh	r5, [r4, #12]
 80043b2:	e7cd      	b.n	8004350 <__smakebuf_r+0x18>
 80043b4:	0800359d 	.word	0x0800359d

080043b8 <__malloc_lock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__malloc_lock+0x8>)
 80043ba:	f7ff b9c1 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	200002bc 	.word	0x200002bc

080043c4 <__malloc_unlock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__malloc_unlock+0x8>)
 80043c6:	f7ff b9bc 	b.w	8003742 <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	200002bc 	.word	0x200002bc

080043d0 <_free_r>:
 80043d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043d2:	2900      	cmp	r1, #0
 80043d4:	d044      	beq.n	8004460 <_free_r+0x90>
 80043d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043da:	9001      	str	r0, [sp, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f1a1 0404 	sub.w	r4, r1, #4
 80043e2:	bfb8      	it	lt
 80043e4:	18e4      	addlt	r4, r4, r3
 80043e6:	f7ff ffe7 	bl	80043b8 <__malloc_lock>
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <_free_r+0x94>)
 80043ec:	9801      	ldr	r0, [sp, #4]
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	b933      	cbnz	r3, 8004400 <_free_r+0x30>
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	6014      	str	r4, [r2, #0]
 80043f6:	b003      	add	sp, #12
 80043f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043fc:	f7ff bfe2 	b.w	80043c4 <__malloc_unlock>
 8004400:	42a3      	cmp	r3, r4
 8004402:	d908      	bls.n	8004416 <_free_r+0x46>
 8004404:	6825      	ldr	r5, [r4, #0]
 8004406:	1961      	adds	r1, r4, r5
 8004408:	428b      	cmp	r3, r1
 800440a:	bf01      	itttt	eq
 800440c:	6819      	ldreq	r1, [r3, #0]
 800440e:	685b      	ldreq	r3, [r3, #4]
 8004410:	1949      	addeq	r1, r1, r5
 8004412:	6021      	streq	r1, [r4, #0]
 8004414:	e7ed      	b.n	80043f2 <_free_r+0x22>
 8004416:	461a      	mov	r2, r3
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b10b      	cbz	r3, 8004420 <_free_r+0x50>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d9fa      	bls.n	8004416 <_free_r+0x46>
 8004420:	6811      	ldr	r1, [r2, #0]
 8004422:	1855      	adds	r5, r2, r1
 8004424:	42a5      	cmp	r5, r4
 8004426:	d10b      	bne.n	8004440 <_free_r+0x70>
 8004428:	6824      	ldr	r4, [r4, #0]
 800442a:	4421      	add	r1, r4
 800442c:	1854      	adds	r4, r2, r1
 800442e:	42a3      	cmp	r3, r4
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	d1e0      	bne.n	80043f6 <_free_r+0x26>
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	4421      	add	r1, r4
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	e7da      	b.n	80043f6 <_free_r+0x26>
 8004440:	d902      	bls.n	8004448 <_free_r+0x78>
 8004442:	230c      	movs	r3, #12
 8004444:	6003      	str	r3, [r0, #0]
 8004446:	e7d6      	b.n	80043f6 <_free_r+0x26>
 8004448:	6825      	ldr	r5, [r4, #0]
 800444a:	1961      	adds	r1, r4, r5
 800444c:	428b      	cmp	r3, r1
 800444e:	bf04      	itt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	bf04      	itt	eq
 8004458:	1949      	addeq	r1, r1, r5
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	6054      	str	r4, [r2, #4]
 800445e:	e7ca      	b.n	80043f6 <_free_r+0x26>
 8004460:	b003      	add	sp, #12
 8004462:	bd30      	pop	{r4, r5, pc}
 8004464:	200002c0 	.word	0x200002c0

08004468 <_read_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	; (8004488 <_read_r+0x20>)
 800446c:	4604      	mov	r4, r0
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	2200      	movs	r2, #0
 8004474:	602a      	str	r2, [r5, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f7fc fd02 	bl	8000e80 <_read>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_read_r+0x1e>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_read_r+0x1e>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	200002c8 	.word	0x200002c8

0800448c <_fstat_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d07      	ldr	r5, [pc, #28]	; (80044ac <_fstat_r+0x20>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	f7fc fd36 	bl	8000f0a <_fstat>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d102      	bne.n	80044a8 <_fstat_r+0x1c>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	b103      	cbz	r3, 80044a8 <_fstat_r+0x1c>
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
 80044aa:	bf00      	nop
 80044ac:	200002c8 	.word	0x200002c8

080044b0 <_isatty_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d06      	ldr	r5, [pc, #24]	; (80044cc <_isatty_r+0x1c>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f7fc fd35 	bl	8000f2a <_isatty>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_isatty_r+0x1a>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_isatty_r+0x1a>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	200002c8 	.word	0x200002c8

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
